package sfw.structure.cvsStructure;


import sfw.structure.cvsStructure.CVSStructure;
import sfw.structure.database.ConnectionInout;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Scanner;
import java.util.TimeZone;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import sfw.structure.database.ConnectionIntegracao;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JFrameCVS.java
 *
 * Created on 11/09/2009, 14:43:25
 */

/**
 *
 * @author andrein
 */
public class JFrameCVS extends javax.swing.JFrame {
    //Vector arrUsers;
    public String arrUsers[][] = new String[100][100];
    int contador = 0;
    DefaultListModel model = new DefaultListModel();
    CVSStructure cvsStruct;
    JFrameCVS jFrame = this;

    public void setTextArea(String textArea){
        this.textArea1.append(textArea);
    }

    public String getTxItUser(){
        return this.txItUser.getText().toString();
    }

    public String getTxItPass(){
        return this.txItPass.getText().toString();
    }

    public String getTxCaminhaGeracao(){
        return this.txCaminhoGeracao.getText().toString();
    }

    /** Creates new form JFrameCVS */
    public JFrameCVS() {
        initComponents();
        jList1.setModel(model);
        cvsStruct =  new CVSStructure();
        /*
        arrUsers[0][1] = "jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.61.7)(PORT=1511)))(CONNECT_DATA=(SERVICE_NAME=HOMOL11)))";
        arrUsers[0][2] = "SFWIOCAM";
        arrUsers[0][3] = "SFWIOCAM";
        arrUsers[0][4] = "HOMOL11";
        contador += 1;
        
        arrUsers[1][1] = "jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.60.10)(PORT=1522)))(CONNECT_DATA=(SERVICE_NAME=TESTE10)))";
        arrUsers[1][2] = "comexiomer";
        arrUsers[1][3] = "comexiomer";
        arrUsers[1][4] = "teste10";
        contador += 1;

        arrUsers[2][1] = "jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=192.168.61.148)(PORT=1521)))(CONNECT_DATA=(SERVICE_NAME=XE)))";
        arrUsers[2][2] = "sfwioahd";
        arrUsers[2][3] = "sfwioahd";
        arrUsers[2][4] = "xe";
        model.addElement("sfwiocam/HOMOL11");
        model.addElement("comexiomer/teste10");
        model.addElement("sfwioahd/xe");
        contador += 1;
         */

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel1 = new java.awt.Panel();
        textArea1 = new java.awt.TextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jProgressBar1 = new javax.swing.JProgressBar();
        jButton1 = new javax.swing.JButton();
        btAdd = new javax.swing.JButton();
        btRemover = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txUser = new java.awt.TextField();
        jLabel2 = new javax.swing.JLabel();
        txPass = new java.awt.TextField();
        jLabel3 = new javax.swing.JLabel();
        txService = new java.awt.TextField();
        jLabel4 = new javax.swing.JLabel();
        txSid = new java.awt.TextField();
        jLabel5 = new javax.swing.JLabel();
        txHost = new java.awt.TextField();
        jLabel6 = new javax.swing.JLabel();
        txPort = new java.awt.TextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txItUser = new javax.swing.JTextField();
        txItPass = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        chCriaDir = new java.awt.Checkbox();
        txCaminhoGeracao = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        chIntMapeamento = new javax.swing.JCheckBox();
        chSynonyms = new javax.swing.JCheckBox();
        btSearch = new javax.swing.JToggleButton();
        btChekAll = new javax.swing.JToggleButton();
        chSapMapeamento = new javax.swing.JCheckBox();
        chViews = new javax.swing.JCheckBox();
        chSequences = new javax.swing.JCheckBox();
        chSistemas = new javax.swing.JCheckBox();
        chArquivosExternos = new javax.swing.JCheckBox();
        chInterfaces = new javax.swing.JCheckBox();
        btUncheall = new javax.swing.JToggleButton();
        chObjetos = new javax.swing.JCheckBox();
        chTabelasTemporiarias = new javax.swing.JCheckBox();
        chDebug = new java.awt.Checkbox();
        jToggleButton1 = new javax.swing.JToggleButton();
        jToggleButton2 = new javax.swing.JToggleButton();
        jToggleButton3 = new javax.swing.JToggleButton();
        btTesteConexao = new javax.swing.JToggleButton();
        chNomePasta = new javax.swing.JCheckBox();
        chConexaoPorArquivo = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("CVS Strcture");
        setBackground(new java.awt.Color(0, 0, 0));
        setBounds(new java.awt.Rectangle(300, 150, 500, 500));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFont(new java.awt.Font("Comic Sans MS", 0, 10));
        setForeground(java.awt.Color.black);
        setName("frameCVSStruct"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        javax.swing.GroupLayout panel1Layout = new javax.swing.GroupLayout(panel1);
        panel1.setLayout(panel1Layout);
        panel1Layout.setHorizontalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panel1Layout.setVerticalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jList1.setBorder(javax.swing.BorderFactory.createTitledBorder("Usuários:"));
        jList1.setFont(new java.awt.Font("Comic Sans MS", 1, 11));
        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jButton1.setText("Executar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btAdd.setText("Add");
        btAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddActionPerformed(evt);
            }
        });

        btRemover.setText("Remover");
        btRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRemoverActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Informações para Conexão:"));
        jPanel1.setFont(new java.awt.Font("Comic Sans MS", 3, 11));

        jLabel1.setFont(new java.awt.Font("Comic Sans MS", 2, 11));
        jLabel1.setText("InOut User:");

        txUser.setName("txUser"); // NOI18N

        jLabel2.setFont(new java.awt.Font("Comic Sans MS", 2, 11));
        jLabel2.setText("InOut Pass:");

        txPass.setName("txPass"); // NOI18N

        jLabel3.setFont(new java.awt.Font("Comic Sans MS", 2, 11));
        jLabel3.setText("Service Name:");

        txService.setName("txService"); // NOI18N

        jLabel4.setFont(new java.awt.Font("Comic Sans MS", 2, 11));
        jLabel4.setText("Sid:");

        txSid.setName("txSid"); // NOI18N

        jLabel5.setFont(new java.awt.Font("Comic Sans MS", 2, 11));
        jLabel5.setText("Host:");

        jLabel6.setFont(new java.awt.Font("Comic Sans MS", 2, 11));
        jLabel6.setText("Port:");

        jLabel8.setFont(new java.awt.Font("Comic Sans MS", 2, 11));
        jLabel8.setText("It. User:");

        jLabel9.setFont(new java.awt.Font("Comic Sans MS", 2, 11));
        jLabel9.setText("It. Pass:");

        txItUser.setFont(new java.awt.Font("Comic Sans MS", 3, 11));

        txItPass.setFont(new java.awt.Font("Comic Sans MS", 3, 11));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txPort, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(txHost, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addContainerGap())
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txPass, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txUser, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel9)
                                        .addComponent(jLabel8))
                                    .addGap(18, 18, 18)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(txItPass)
                                        .addComponent(txItUser, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)))
                                .addComponent(txSid, javax.swing.GroupLayout.DEFAULT_SIZE, 408, Short.MAX_VALUE)
                                .addComponent(txService, javax.swing.GroupLayout.DEFAULT_SIZE, 408, Short.MAX_VALUE))
                            .addGap(16, 16, 16)))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txItUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel8))
                    .addComponent(txUser, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txItPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel9))
                    .addComponent(txPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(txService, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(txSid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addComponent(txHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6)
                    .addComponent(txPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Opções para execução:"));

        chCriaDir.setLabel("Criar Diretorios");
        chCriaDir.setName("chCriaDir"); // NOI18N
        chCriaDir.setState(true);
        chCriaDir.setVisible(false);

        txCaminhoGeracao.setText(".\\");

            jLabel7.setFont(new java.awt.Font("Comic Sans MS", 1, 11)); // NOI18N
            jLabel7.setText("Caminho para geração dos Scripts:");

            chIntMapeamento.setSelected(true);
            chIntMapeamento.setText("Int Mapeamento");

            chSynonyms.setSelected(true);
            chSynonyms.setText("Synonyms");

            btSearch.setText("...");
            btSearch.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btSearchActionPerformed(evt);
                }
            });

            btChekAll.setText("chek all");
            btChekAll.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btChekAllActionPerformed(evt);
                }
            });

            chSapMapeamento.setSelected(true);
            chSapMapeamento.setText("Sap Mapeamento");

            chViews.setSelected(true);
            chViews.setText("Views");

            chSequences.setSelected(true);
            chSequences.setText("Sequences");

            chSistemas.setSelected(true);
            chSistemas.setText("Sistemas");

            chArquivosExternos.setSelected(true);
            chArquivosExternos.setText("Arquivos Externos");

            chInterfaces.setSelected(true);
            chInterfaces.setText("Interfaces");

            btUncheall.setText("unchek all");
            btUncheall.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btUncheallActionPerformed(evt);
                }
            });

            chObjetos.setSelected(true);
            chObjetos.setText("Objetos");

            chTabelasTemporiarias.setSelected(true);
            chTabelasTemporiarias.setText("Tabelas Temporarias");

            javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
            jPanel3.setLayout(jPanel3Layout);
            jPanel3Layout.setHorizontalGroup(
                jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(chTabelasTemporiarias)
                            .addContainerGap())
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(txCaminhoGeracao, javax.swing.GroupLayout.PREFERRED_SIZE, 464, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                                .addComponent(btSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel7)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(chCriaDir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(chArquivosExternos)
                                    .addComponent(chInterfaces)
                                    .addComponent(chSequences))
                                .addGap(54, 54, 54)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(chIntMapeamento)
                                    .addComponent(chSynonyms)
                                    .addComponent(chSistemas))
                                .addGap(31, 31, 31)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(chObjetos)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 82, Short.MAX_VALUE)
                                        .addComponent(btUncheall))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                        .addComponent(chViews)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 104, Short.MAX_VALUE)
                                        .addComponent(btChekAll))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                        .addComponent(chSapMapeamento)
                                        .addContainerGap()))))))
            );
            jPanel3Layout.setVerticalGroup(
                jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(chCriaDir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(chIntMapeamento)
                                .addComponent(chSapMapeamento)
                                .addComponent(chInterfaces))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(chSynonyms)
                                .addComponent(btChekAll)
                                .addComponent(chViews)
                                .addComponent(chArquivosExternos))))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(chSistemas)
                                .addComponent(chSequences))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(chTabelasTemporiarias)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btUncheall)
                            .addComponent(chObjetos)))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txCaminhoGeracao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btSearch)))
            );

            chDebug.setLabel("debug");

            jToggleButton1.setText("Salvar");
            jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jToggleButton1ActionPerformed(evt);
                }
            });

            jToggleButton2.setText("Carregar");
            jToggleButton2.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jToggleButton2ActionPerformed(evt);
                }
            });

            jToggleButton3.setText("Clear");
            jToggleButton3.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jToggleButton3ActionPerformed(evt);
                }
            });

            btTesteConexao.setText("Teste Conexão");
            btTesteConexao.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btTesteConexaoActionPerformed(evt);
                }
            });

            chNomePasta.setSelected(true);
            chNomePasta.setText("Utilizar sistema para definir nomenclatura das pastas das interfaces");

            chConexaoPorArquivo.setSelected(true);
            chConexaoPorArquivo.setText("Utilizar uma conexão por arquivo");

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(textArea1, javax.swing.GroupLayout.DEFAULT_SIZE, 764, Short.MAX_VALUE)
                            .addContainerGap())
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 754, Short.MAX_VALUE)
                            .addGap(20, 20, 20))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jToggleButton1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jToggleButton2))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(chDebug, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jButton1))
                                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(btAdd)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(btRemover)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jToggleButton3)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 219, Short.MAX_VALUE)
                                            .addComponent(btTesteConexao)
                                            .addGap(34, 34, 34))
                                        .addComponent(chConexaoPorArquivo))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(chNomePasta))
                            .addContainerGap())))
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(511, 511, 511)
                            .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btRemover)
                                        .addComponent(btAdd)
                                        .addComponent(jToggleButton3)
                                        .addComponent(btTesteConexao))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(chNomePasta))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 497, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButton1)
                                    .addComponent(jToggleButton1)
                                    .addComponent(jToggleButton2))
                                .addComponent(chDebug, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(textArea1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap())
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(490, Short.MAX_VALUE)
                    .addComponent(chConexaoPorArquivo)
                    .addGap(256, 256, 256))
            );

            pack();
        }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
            jProgressBar1.setIndeterminate(true);

            Thread tThread = new Thread(new Runnable() {
            public void run() {
                ArrayList arrChecks = new ArrayList();

                if(chArquivosExternos.isSelected()){
                    arrChecks.add("ArquivosExternos");
                }

                if(chInterfaces.isSelected()){
                    arrChecks.add("Interfaces");
                }

                if(chCriaDir.getState()){
                    arrChecks.add("D");
                }

                if(chSynonyms.isSelected()){
                    arrChecks.add("Synonyms");
                }

                if(chIntMapeamento.isSelected()){
                    arrChecks.add("IntMapeamento");
                }

                if(chSapMapeamento.isSelected()){
                    arrChecks.add("SapMapeamento");
                }

                if(chViews.isSelected()){
                    arrChecks.add("Views");
                }

                if(chSequences.isSelected()){
                    arrChecks.add("Sequences");
                }

                if(chSistemas.isSelected()){
                    arrChecks.add("Sistemas");
                }

                if(chObjetos.isSelected()){
                    arrChecks.add("Objetos");
                }

                if(chTabelasTemporiarias.isSelected()){
                    arrChecks.add("TabelasTemporarias");
                }

                int cont_user = 0;
                if(!model.isEmpty()){
                    Calendar cal = Calendar.getInstance(TimeZone.getDefault());
                    String DATE_FORMAT = "yyyy-MM-dd HHmmss";
                    java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat(DATE_FORMAT);
                    sdf.setTimeZone(TimeZone.getDefault());

                    Object[] sSelectedUser = jList1.getSelectedValues();
                    if(sSelectedUser.length != 0){
                        // Obtendo as bases selecionadas
                        for(int j=0; j < sSelectedUser.length; j++){

                            //
                            for(int i=0; i < arrUsers.length;i++){
                                if(arrUsers[i][1] != null && !arrUsers[i][1].equals("")){
                                    String userArray = arrUsers[i][2].toUpperCase()+"/"+arrUsers[i][4].toUpperCase();
                                    if(userArray.toUpperCase().equals(((String)sSelectedUser[j]).toUpperCase())){

                                        setTextArea("#################################################################\n");
                                        setTextArea("## " + arrUsers[i][2].toUpperCase() +"/"+ arrUsers[i][4].toUpperCase() + "##\n");
                                        setTextArea("## Data Hora Inicio " + sdf.format(cal.getTime()) + "##\n");
                                        setTextArea("#################################################################\n\n");

                                        cvsStruct.s_Conn = arrUsers[i][1];
                                        cvsStruct.s_User = arrUsers[i][2];
                                        cvsStruct.s_Pass = arrUsers[i][3];
                                        cvsStruct.s_ItUser = arrUsers[i][5];
                                        cvsStruct.s_ItPass = arrUsers[i][6];

                                        if(chDebug.getState()){
                                            CVSStructure.sDebug = "S";
                                        }

                                        if(chNomePasta.isSelected()){
                                            CVSStructure.chNomePasta = "S";
                                        }else{
                                            CVSStructure.chNomePasta = "N";
                                        }

                                        if(chConexaoPorArquivo.isSelected()){
                                            CVSStructure.chConexaoPorArquivos = "S";
                                        }else{
                                            CVSStructure.chConexaoPorArquivos = "N";
                                        }

                                        try {
                                            //Conectando na Base do InOut
                                            try {
                                                ConnectionInout.initialize(arrUsers[i][7], cvsStruct.s_User, cvsStruct.s_Pass, arrUsers[i][8], arrUsers[i][4]);

                                                if( ConnectionInout.getConnection() == null ){
                                                    JOptionPane.showMessageDialog(null, "Erro ao conectar no inout !");
                                                }
                                            } catch (SQLException ex) {
                                                JOptionPane.showMessageDialog(null, "Erro na conexão inout !" + ex.getMessage());
                                            }

                                            //Conectando na Base de Integração
                                            if(cvsStruct.s_ItUser != null && !cvsStruct.s_ItUser.equals("")){
                                                try{
                                                    ConnectionIntegracao.initialize(arrUsers[i][7], cvsStruct.s_ItUser, cvsStruct.s_ItPass, arrUsers[i][8], arrUsers[i][4]);

                                                    if( ConnectionIntegracao.getConnection() == null ){
                                                        JOptionPane.showMessageDialog(null, "Erro ao conectar na integracao !");
                                                    }
                                                } catch (SQLException ex) {
                                                    JOptionPane.showMessageDialog(null, "Erro na conexão integração !" + ex.getMessage());
                                                }
                                            }

                                            cvsStruct.spoolCVSStruture(arrChecks, jFrame);
                                        } catch (SQLException ex) {
                                            Logger.getLogger(JFrameCVS.class.getName()).log(Level.SEVERE, null, ex);
                                        } catch (IOException ex) {
                                            Logger.getLogger(JFrameCVS.class.getName()).log(Level.SEVERE, null, ex);
                                        }
                                        cont_user+=1;

                                        setTextArea("\n#################################################################\n");
                                        setTextArea("## GERAÇÃO DOS SCRIPTS CONCLUIDA - " + arrUsers[i][2].toUpperCase() +"/"+ arrUsers[i][4].toUpperCase() + "##\n");
                                        setTextArea("## Data Hora Fim " + sdf.format(cal.getTime()) + "##\n");
                                        setTextArea("#################################################################\n\n");
                                        jProgressBar1.setIndeterminate(false);

                                    }
                                }
                            }
                        }
                    }else{
                        JOptionPane.showMessageDialog(null, "Selecione as bases desejadas para geração dos scripts !");
                        jProgressBar1.setIndeterminate(false);
                    }
                    arrChecks.removeAll(arrChecks);
                }
            }
            });
             tThread.start();
             
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddActionPerformed

        if(txService.getText().equals("") && txSid.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Informe a Service/Sid");
        }else{
            if(txUser.getText().equals("")){
                JOptionPane.showMessageDialog(null, "Informe Usuario");
            }else{
                if(txPass.getText().equals("")){
                    JOptionPane.showMessageDialog(null, "Informe Password");
                }else{
                    if(txPort.getText().equals("")){
                        JOptionPane.showMessageDialog(null, "Informe a Porta para conexão");
                    }else{
                        if(txHost.getText().equals("")){
                            JOptionPane.showMessageDialog(null, "Informe o Host conexão");
                        }else{
                            if(model.contains(txUser.getText()+"/"+txService.getText()) || model.contains(txUser.getText()+"/"+txSid.getText())){
                                JOptionPane.showMessageDialog(null, "Usuarios já cadastrado");
                            }else{
                                if(txService.getText() != null || !txService.getText().equals("")){
                                    arrUsers[contador][1] = "jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=" + txHost.getText() +")(PORT="+ txPort.getText() +")))(CONNECT_DATA=(SERVICE_NAME="+txService.getText()+")))";
                                    model.addElement(txUser.getText()+"/"+txService.getText());
                                    arrUsers[contador][4] = txService.getText();
                                }else if(txSid.getText() != null || !txSid.getText().equals("")){
                                    arrUsers[contador][1] = "jdbc:oracle:thin:@(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=" + txHost.getText() +")(PORT="+ txPort.getText() +")))(CONNECT_DATA=(SID="+txSid.getText()+")))";
                                    model.addElement(txUser.getText()+"/"+txSid.getText());
                                    arrUsers[contador][4] = txSid.getText();
                                }

                                arrUsers[contador][2] = txUser.getText();
                                arrUsers[contador][3] = txPass.getText();
                                arrUsers[contador][5] = txItUser.getText();
                                arrUsers[contador][6] = txItPass.getText();
                                arrUsers[contador][7] = txHost.getText();
                                arrUsers[contador][8] = txPort.getText();
                                arrUsers[contador][9] = txSid.getText();

                                contador += 1;
                            }
                        }
                    }
               }
            }
        }
}//GEN-LAST:event_btAddActionPerformed

    private void btRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRemoverActionPerformed
        // TODO add your handling code here:
        String  sSelectedUser = jList1.getSelectedValue().toString();
        //JOptionPane.showMessageDialog(null, sSelectedUser);
        Object[] options = { "OK", "CANCEL" };
        if(JOptionPane.showOptionDialog(null, "Confirma a remoção do usuário " + sSelectedUser + "?", "Atenção",
        JOptionPane.OK_CANCEL_OPTION, JOptionPane.OK_CANCEL_OPTION,
        null, options, options[0]) == 0){

            for(int i=0;i < arrUsers.length;i++){
                if(arrUsers[i][2] !=null && arrUsers[i][4] !=null ){
                    String userArray = arrUsers[i][2].toUpperCase()+"/"+arrUsers[i][4].toUpperCase();
                    if(userArray.toUpperCase().equals(sSelectedUser.toUpperCase())){
                        arrUsers[i][1] = null;
                        arrUsers[i][2] = null;
                        arrUsers[i][3] = null;
                        arrUsers[i][4] = null;
                        arrUsers[i][5] = null;
                        arrUsers[i][6] = null;
                        model.removeElement(sSelectedUser);
                        break;
                    }
                }
            }
        }
}//GEN-LAST:event_btRemoverActionPerformed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        Object[] options = { "OK", "CANCEL" };
        if(JOptionPane.showOptionDialog(null, "Deseja gravar os usuarios cadastrados ?", "Atenção",
        JOptionPane.OK_CANCEL_OPTION, JOptionPane.OK_CANCEL_OPTION,
        null, options, options[0]) == 0){

            StringBuffer strOutScripts = new StringBuffer();
            String fileNameScripts = ".\\ConfigCVSStructure.conf";
            for(int i=0;i < arrUsers.length;i++){
                if(arrUsers[i][2] !=null && arrUsers[i][4] !=null ){
                    //String userArray = arrUsers[i][2].toUpperCase()+"/"+arrUsers[i][4].toUpperCase();
                    strOutScripts.append(arrUsers[i][2] + ";" + arrUsers[i][3] + ";" + arrUsers[i][5] + ";" + arrUsers[i][6] + ";" + arrUsers[i][1] + "\n");
                }
            }

            //logMessage("Creating or appending to file " + fileNameScripts);
            try {
                File fileScripts = new File(fileNameScripts);
                if(!fileScripts.exists())
                    fileScripts.createNewFile();

                FileWriter fwScripts = new FileWriter(fileScripts, false);
                fwScripts.write(strOutScripts.toString(),0,strOutScripts.length());
                fwScripts.close();
            } catch (IOException ex) {
                Logger.getLogger(JFrameCVS.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void jToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton2ActionPerformed
        String readLine = "";
        String s_User = "";
        String s_Pass = "";
        String s_ItUser = "";
        String s_ItPass = "";
        String sChave = "";
        String s_Conn = "";

        //FileReader rd = new FileReader("c:\\texto3.txt");
        //LineNumberReader scanner = new LineNumberReader(rd);
        try {
            File fileT = new File(".\\ConfigCVSStructure.conf");
            FileInputStream file;
            file = new FileInputStream(fileT);

            Scanner scanner	= new Scanner(file);
            while (scanner.hasNext()){
                readLine = scanner.next();

                //s_User = readLine.substring(0, readLine.indexOf(";"));
                //s_Pass = readLine.substring(readLine.indexOf(";")+1, readLine.lastIndexOf(";"));
                //s_Conn = readLine.substring(readLine.lastIndexOf(";")+1, readLine.length());

                String ar[] = readLine.split(";");
                s_User = ar[0];
                s_Pass = ar[1];
                s_ItUser = ar[2];
                s_ItPass = ar[3];
                s_Conn = ar[4];

                arrUsers[contador][2] = s_User;
                arrUsers[contador][3] = s_Pass;
                arrUsers[contador][1] = s_Conn;
                arrUsers[contador][5] = s_ItUser;
                arrUsers[contador][6] = s_ItPass;

                String sTNS = readLine.substring(readLine.lastIndexOf("SERVICE_NAME")+13, readLine.lastIndexOf(")))"));
                String sSid = "";
                if (readLine.lastIndexOf("SID") != -1){
                    sSid = readLine.substring(readLine.lastIndexOf("SID")+4, readLine.lastIndexOf(")))"));
                }
                String sHost = readLine.substring(readLine.lastIndexOf("HOST")+5, readLine.lastIndexOf(")(PORT"));
                String sPort = readLine.substring(readLine.lastIndexOf("PORT")+5, readLine.lastIndexOf(")))("));
                arrUsers[contador][4] = sTNS;
                arrUsers[contador][7] = sHost;
                arrUsers[contador][8] = sPort;
                arrUsers[contador][9] = sSid;
                model.addElement(s_User + "/" + sTNS);
                contador += 1;
            }
            file.close();
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(JFrameCVS.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
          Logger.getLogger(JFrameCVS.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jToggleButton2ActionPerformed

    private void jToggleButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton3ActionPerformed
        this.cleanField();
    }//GEN-LAST:event_jToggleButton3ActionPerformed

    public void cleanField(){
        txHost.setText("");
        txPass.setText("");
        txPort.setText("");
        txService.setText("");
        txSid.setText("");
        txUser.setText("");
        txItUser.setText("");
        txItPass.setText("");
    }
    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        String  sSelectedUser = jList1.getSelectedValue().toString();
        this.cleanField();
        for(int i=0;i < arrUsers.length;i++){
            if(arrUsers[i][2] !=null && arrUsers[i][4] !=null ){
                String userArray = arrUsers[i][2].toUpperCase()+"/"+arrUsers[i][4].toUpperCase();
                if(userArray.toUpperCase().equals(sSelectedUser.toUpperCase())){
                    //txUser.setText(arrUsers[i][1]);
                    txUser.setText(arrUsers[i][2]);
                    txPass.setText(arrUsers[i][3]);
                    txService.setText(arrUsers[i][4]);
                    txItUser.setText(arrUsers[i][5]);
                    txItPass.setText(arrUsers[i][6]);
                    txHost.setText(arrUsers[i][7]);
                    txPort.setText(arrUsers[i][8]);
                    txSid.setText(arrUsers[i][9]);

                    break;
                }
            }
        }

    }//GEN-LAST:event_jList1MouseClicked

    private void btTesteConexaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btTesteConexaoActionPerformed
        try {
            ConnectionInout.initialize(txHost.getText().toString(), txUser.getText().toString(), txPass.getText().toString(), txPort.getText(), txService.getText());
            if( ConnectionInout.getConnection() != null ){
                JOptionPane.showMessageDialog(null, "OK !");
            }else{
                JOptionPane.showMessageDialog(null, "Erro ao conectar !");
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Erro na conexão !" + ex.getMessage());
        }finally{
            try {
                ConnectionInout.disconnect();
            } catch (SQLException ex) {
                Logger.getLogger(JFrameCVS.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_btTesteConexaoActionPerformed

    private void btSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSearchActionPerformed
        JFileChooser fc = new JFileChooser();

        // restringe a amostra a diretorios apenas
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        int res = fc.showOpenDialog(null);

        if(res == JFileChooser.APPROVE_OPTION){
            File diretorio = fc.getSelectedFile();
            //JOptionPane.showMessageDialog(null, "Voce escolheu o diretório: " + diretorio.getName());
            txCaminhoGeracao.setText(diretorio.getAbsolutePath());
        }
        else
            JOptionPane.showMessageDialog(null, "Voce nao selecionou nenhum diretorio.");
    }//GEN-LAST:event_btSearchActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        //Desconectando do banco
        try {
            ConnectionInout.disconnect();
        } catch (SQLException ex) {
            Logger.getLogger(JFrameCVS.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowClosed

    private void btUncheallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btUncheallActionPerformed
        chArquivosExternos.setSelected(false);
        chIntMapeamento.setSelected(false);
        chInterfaces.setSelected(false);
        chSapMapeamento.setSelected(false);
        chSequences.setSelected(false);
        chSistemas.setSelected(false);
        chSynonyms.setSelected(false);
        chViews.setSelected(false);
        chObjetos.setSelected(false);
        chTabelasTemporiarias.setSelected(false);
    }//GEN-LAST:event_btUncheallActionPerformed

    private void btChekAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btChekAllActionPerformed
        chArquivosExternos.setSelected(true);
        chIntMapeamento.setSelected(true);
        chInterfaces.setSelected(true);
        chSapMapeamento.setSelected(true);
        chSequences.setSelected(true);
        chSistemas.setSelected(true);
        chSynonyms.setSelected(true);
        chViews.setSelected(true);
        chObjetos.setSelected(true);
        chTabelasTemporiarias.setSelected(true);
    }//GEN-LAST:event_btChekAllActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(final String args[]) {

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    validateCommandLine();
                } catch (Exception ex) {
                    Logger.getLogger(JFrameCVS.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            private void validateCommandLine() throws Exception {
                  CVSStructure cvsStruct = new CVSStructure();
                  String sChave = null;
                  String s_User = null;
                  String s_Pass = null;
                  String s_ItUser = null;
                  String s_ItPass = null;
                  String sRole  = null;
                  String sDebug = "N";
                  String sSessionSchema = null;
                  String s_Conn = null;

                  for (int i=0; i<args.length ;i++)
                  {
                        // valida parâmetro importacao
                        //armazena o usuário e senha a utilizar durante o processamento
                        sChave = "-user=";
                        if (args[i].startsWith(sChave)) {
                            String s_Usuario_Senha = args[i].substring(sChave.length(),args[i].length());
                            s_User = s_Usuario_Senha.substring(0, s_Usuario_Senha.indexOf("/"));
                            s_Pass = s_Usuario_Senha.substring(s_Usuario_Senha.indexOf("/")+1);
                        }
                        // Valida parametro CONN
                        //armazena dados sobre o TNS
                        sChave = "-conn=";
                        if (args[i].startsWith(sChave))
                            s_Conn = args[i].substring(sChave.length(),args[i].length());

                        //armazena o schema a utilizar durante o processamento corrente
                        sChave = "-sessionschema=";
                        if (args[i].startsWith(sChave))
                            sSessionSchema = args[i].substring(sChave.length(),args[i].length());

                        //armazena a ROLE utilizada durante o processamento
                        sChave = "-role=";
                        if (args[i].startsWith(sChave))
                            sRole = args[i].substring(sChave.length(),args[i].length());

                        //armazena a ROLE utilizada durante o processamento
                        sChave = "-debug=";
                        if (args[i].startsWith(sChave))
                            sDebug = args[i].substring(sChave.length(),args[i].length());
                  }

                  if(s_Conn == null){
                    new JFrameCVS().setVisible(true);
                  }else{
                            cvsStruct.s_Conn = s_Conn;
                            cvsStruct.s_User = s_User;
                            cvsStruct.s_Pass = s_Pass;
                            cvsStruct.s_ItUser = s_ItUser;
                            cvsStruct.s_ItPass = s_ItPass;

                            ArrayList arrChecks = new ArrayList();
                            arrChecks.add("T");

                            if(sDebug != null && !sDebug.equals("")){
                                CVSStructure.sDebug = "S";
                            }

                            // Utilizado para execução da interface sem a camada de apresentação visual
                            //Conectando na Base do InOut
                            /*
                            try {
                                ConnectionInout.initialize(arrUsers[i][7], cvsStruct.s_User, cvsStruct.s_Pass, arrUsers[i][8], arrUsers[i][4]);

                                if( ConnectionInout.getConnection() == null ){
                                    JOptionPane.showMessageDialog(null, "Erro ao conectar no inout !");
                                }
                            } catch (SQLException ex) {
                                JOptionPane.showMessageDialog(null, "Erro na conexão inout !" + ex.getMessage());
                            }

                            //Conectando na Base de Integração
                            if(cvsStruct.s_ItUser != null && !cvsStruct.s_ItUser.equals("")){
                                try{
                                    ConnectionIntegracao.initialize(arrUsers[i][7], cvsStruct.s_ItUser, cvsStruct.s_ItPass, arrUsers[i][8], arrUsers[i][4]);

                                    if( ConnectionIntegracao.getConnection() == null ){
                                        JOptionPane.showMessageDialog(null, "Erro ao conectar na integracao !");
                                    }
                                } catch (SQLException ex) {
                                    JOptionPane.showMessageDialog(null, "Erro na conexão integração !" + ex.getMessage());
                                }
                            }
                            cvsStruct.connectOracle(s_User, s_Pass);
                             * */
                            cvsStruct.spoolCVSStruture(arrChecks, null);
                  }
            }
        });
    }

    public javax.swing.JCheckBox getChIntMapeamento(){
        return chIntMapeamento;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAdd;
    private javax.swing.JToggleButton btChekAll;
    private javax.swing.JButton btRemover;
    private javax.swing.JToggleButton btSearch;
    private javax.swing.JToggleButton btTesteConexao;
    private javax.swing.JToggleButton btUncheall;
    private javax.swing.JCheckBox chArquivosExternos;
    private javax.swing.JCheckBox chConexaoPorArquivo;
    private java.awt.Checkbox chCriaDir;
    private java.awt.Checkbox chDebug;
    private javax.swing.JCheckBox chIntMapeamento;
    private javax.swing.JCheckBox chInterfaces;
    private javax.swing.JCheckBox chNomePasta;
    private javax.swing.JCheckBox chObjetos;
    private javax.swing.JCheckBox chSapMapeamento;
    private javax.swing.JCheckBox chSequences;
    private javax.swing.JCheckBox chSistemas;
    private javax.swing.JCheckBox chSynonyms;
    private javax.swing.JCheckBox chTabelasTemporiarias;
    private javax.swing.JCheckBox chViews;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToggleButton jToggleButton2;
    private javax.swing.JToggleButton jToggleButton3;
    private java.awt.Panel panel1;
    private java.awt.TextArea textArea1;
    private javax.swing.JTextField txCaminhoGeracao;
    private java.awt.TextField txHost;
    private javax.swing.JTextField txItPass;
    private javax.swing.JTextField txItUser;
    private java.awt.TextField txPass;
    private java.awt.TextField txPort;
    private java.awt.TextField txService;
    private java.awt.TextField txSid;
    private java.awt.TextField txUser;
    // End of variables declaration//GEN-END:variables
}
