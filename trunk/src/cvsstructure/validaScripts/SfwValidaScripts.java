package cvsstructure.validaScripts;


import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ValidaScripts.java
 *
 * Created on 18/09/2009, 14:18:31
 */

/**
 *
 * @author andrein
 */
public class SfwValidaScripts extends javax.swing.JFrame {
    StringBuffer strOut;
    private String fileName;
    private String arqsInstala = "S";

    //Inout
    private ArrayList collectionTabelas = new ArrayList();
    private ArrayList collectionArquivosExternos = new ArrayList();
    private ArrayList collectionInterface = new ArrayList();

    //Integracao
    private ArrayList collectionIntegracao = new ArrayList();
    private ArrayList collectionSistemas = new ArrayList();

    //Quebrar linha
    //public String sQuebraLinha = System.getProperty("line.separator");
    public String sQuebraLinha = "\r\n";

    public String tipoPasta = "";

    /** Creates new form ValidaScripts */
    public SfwValidaScripts() {
        initComponents();
    }

    public void setArqsInstala(String arqsInstala){
        this.arqsInstala = arqsInstala;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        chPastas = new javax.swing.JCheckBox();
        chArquivos = new javax.swing.JCheckBox();
        chGeral = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        txDefine = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        txDiretorio = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBounds(new java.awt.Rectangle(300, 150, 500, 500));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Instalador"));

        chPastas.setSelected(true);
        chPastas.setText("Criar Prompt das pastas");

        chArquivos.setSelected(true);
        chArquivos.setText("Criar Prompt dos arquivos");

        chGeral.setSelected(true);
        chGeral.setText("Gerar ordem_instalacao das pastas pai");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chPastas)
                    .addComponent(chArquivos)
                    .addComponent(chGeral))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chPastas)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chArquivos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(chGeral)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Define"));

        txDefine.setEditable(false);
        txDefine.setText(".\\defines.sql");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(txDefine, javax.swing.GroupLayout.DEFAULT_SIZE, 610, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(txDefine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Diretório Selecionado"));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(txDiretorio, javax.swing.GroupLayout.DEFAULT_SIZE, 610, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(txDiretorio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Log"));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setText("Executar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 636, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 304, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(43, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

            Thread tThread = new Thread(new Runnable() {
            public void run() {
                try {
                    strOut = new StringBuffer();
                    jTextArea1.append("*** Iniciando Geração dos map dos scripts " + sQuebraLinha);
                    if(!chGeral.isSelected()){
                        validaDiretorio(txDiretorio.getText(), "S");
                    }else{
                        validaDiretorio(txDiretorio.getText(), "N");
                    }
                    jTextArea1.append("*** Finalizado Geração dos map dos scripts " + sQuebraLinha);

                    //String sInstala = "SQLPLUS /NOLOG  @.\\ordem_instalacao.sql";
                    
                    //copy(new File(txDefine.getText()), new File(txDiretorio.getText() + "\\" + "defines.sql" ));
                    //copy(new File("c:\\Readme.txt"), new File(txDiretorio.getText() + "\\" + "Readme.txt" ));

                    copy(new File(".\\definicoes\\define.sql"), new File(txDiretorio.getText() + "\\" + "define.sql" ));
                    copy(new File(".\\definicoes\\Instrucoes.txt"), new File(txDiretorio.getText() + "\\" + "Instrucoes.txt" ));
                    copy(new File(".\\definicoes\\limpa_definicoes.sql"), new File(txDiretorio.getText() + "\\" + "limpa_definicoes.sql" ));
                    copy(new File(".\\definicoes\\processa_grants.sql"), new File(txDiretorio.getText() + "\\" + "processa_grants.sql" ));
                    copy(new File(".\\definicoes\\compila_invalidos.sql"), new File(txDiretorio.getText() + "\\" + "compila_invalidos.sql" ));
                    copy(new File(".\\definicoes\\instala_linux.sh"), new File(txDiretorio.getText() + "\\" + "instala_linux.sh" ));
                    copy(new File(".\\definicoes\\Instala_win.bat"), new File(txDiretorio.getText() + "\\" + "Instala_win.bat" ));
                    copy(new File(".\\definicoes\\dispara_script_instalacao.sql"), new File(txDiretorio.getText() + "\\" + "dispara_script_instalacao.sql" ));
                    copy(new File(".\\definicoes\\connect_io.sql"), new File(txDiretorio.getText() + "\\" + "connect_io.sql" ));
                    copy(new File(".\\definicoes\\connect_it.sql"), new File(txDiretorio.getText() + "\\" + "connect_it.sql" ));
                    copy(new File(".\\definicoes\\processa_grants_sistema.sql"), new File(txDiretorio.getText() + "\\" + "processa_grants_sistema.sql" ));
                    
                    // Criando mapeamento dos scripts
                    //fileName = txDiretorio.getText() + "\\Instala.bat";
                    //File file = new File(fileName);
                    //if(!file.exists())
                    //    file.createNewFile();

                    //FileWriter fw = new FileWriter(file, false);
                    //fw.write(sInstala.toString(),0,sInstala.length());
                    //fw.close();

                } catch (Exception ex) {
                    Logger.getLogger(SfwValidaScripts.class.getName()).log(Level.SEVERE, null, ex);
                    ex.printStackTrace();
                }
            }
            });
            tThread.start();

    }//GEN-LAST:event_jButton1ActionPerformed

    public void executar(String nomeDir) {
           try {
                strOut = new StringBuffer();
                jTextArea1.append("*** Iniciando Geração dos map dos scripts " + sQuebraLinha);
                validaDiretorio(nomeDir, "S");
                jTextArea1.append("*** Finalizado Geração dos map dos scripts " + sQuebraLinha);

                if(arqsInstala.equals("S")){
                    //String sInstala = "SQLPLUS /NOLOG  @ordem_instalacao.sql";

                    //copy(new File(txDefine.getText()), new File(txDiretorio.getText() + "\\" + "defines.sql" ));
                    //copy(new File("c:\\Readme.txt"), new File(txDiretorio.getText() + "\\" + "Readme.txt" ));

                    copy(new File(".\\definicoes\\define.sql"), new File(nomeDir + "\\" + "define.sql" ));
                    copy(new File(".\\definicoes\\Instrucoes.txt"), new File(nomeDir + "\\" + "Instrucoes.txt" ));
                    copy(new File(".\\definicoes\\limpa_definicoes.sql"), new File(nomeDir + "\\" + "limpa_definicoes.sql" ));
                    copy(new File(".\\definicoes\\processa_grants.sql"), new File(txDiretorio.getText() + "\\" + "processa_grants.sql" ));
                    copy(new File(".\\definicoes\\compila_invalidos.sql"), new File(txDiretorio.getText() + "\\" + "compila_invalidos.sql" ));
                    copy(new File(".\\definicoes\\instala_linux.sh"), new File(txDiretorio.getText() + "\\" + "instala_linux.sh" ));
                    copy(new File(".\\definicoes\\Instala_win.bat"), new File(txDiretorio.getText() + "\\" + "Instala_win.bat" ));
                    copy(new File(".\\definicoes\\dispara_script_instalacao.sql"), new File(txDiretorio.getText() + "\\" + "dispara_script_instalacao.sql" ));
                    copy(new File(".\\definicoes\\connect_io.sql"), new File(txDiretorio.getText() + "\\" + "connect_io.sql" ));
                    copy(new File(".\\definicoes\\connect_it.sql"), new File(txDiretorio.getText() + "\\" + "connect_it.sql" ));
                    copy(new File(".\\definicoes\\processa_grants_sistema.sql"), new File(txDiretorio.getText() + "\\" + "processa_grants_sistema.sql" ));


                    // Criando mapeamento dos scripts
                    //fileName = nomeDir + "\\Instala_win.bat";
                    //File file = new File(fileName);
                    //if(!file.exists())
                    //    file.createNewFile();

                    //FileWriter fw = new FileWriter(file, false);
                    //fw.write(sInstala.toString(),0,sInstala.length());
                    //fw.close();
                }

            } catch (Exception ex) {
                Logger.getLogger(SfwValidaScripts.class.getName()).log(Level.SEVERE, null, ex);
                ex.printStackTrace();
            }
    }

    // Copia arquivo desejado, para o arquivo de destino
    // Se o arquivo de destino não existir, ele será criado
    public void copy(File src, File dst) throws IOException {
        InputStream in = new FileInputStream(src);
        OutputStream out = new FileOutputStream(dst);  

        // Transferindo bytes de entrada para saída
        byte[] buf = new byte[1024];
        int len;
        while ((len = in.read(buf)) > 0) {
            out.write(buf, 0, len);
        }
        in.close();
        out.close();
    }

	/**************************************************************************
	 * <b>Remover diretórios</b>
	 **************************************************************************/
	private void validaDiretorio(String nomeDir, String subs) throws Exception{
        StringBuffer dirAtual = new StringBuffer();

        // Quando colocar os ordems_intalação em cada diretória da pasta selecionada
        if(subs.equals("S")){

            // diretório inicial para gerar a ordem de instalção
            dirAtual.append(".\\" + nomeDir.substring(nomeDir.lastIndexOf("\\")+1, nomeDir.length()) + "\\" );

            //this.strOut.append("SPOOL SCRIPT_STATUS.LOG\n");
            this.strOut.append("@\".\\define.sql\"" + sQuebraLinha);

            File diretorio = new File(nomeDir);
            File[] subdiretorios = diretorio.listFiles();
            if(subdiretorios != null){
                for(File subdir : subdiretorios){
                    if(subdir.isDirectory()){
                        // listando subdiretórios
                        this.tipoPasta = "";
                        if(subdir.getName().equals("INTEGRACAO")){
                            this.tipoPasta = "INTEGRACAO";
                        }else if(subdir.getName().equals("Sistema")){
                            this.tipoPasta = "Sistemas";
                        }
                        listaSubDir(subdir, dirAtual + subdir.getName() + "\\");
                    }
                }
            }

            //Organizando diretórios
            if(!collectionIntegracao.isEmpty()){
                //this.strOut.append("conn &INTEGRACAO_USER/&INTEGRACAO_PASS@&TNS" + sQuebraLinha);
                this.strOut.append("@\".\\connect_it.sql\"" + sQuebraLinha);
            }
            Iterator iteratorIntegracao = collectionIntegracao.iterator();
            while(iteratorIntegracao.hasNext()){
                this.strOut.append(iteratorIntegracao.next());
            }
            collectionIntegracao = new ArrayList();

            if(!collectionArquivosExternos.isEmpty() || !collectionInterface.isEmpty()){
                //this.strOut.append("conn &INOUT_USER/&INOUT_PASS@&TNS" + sQuebraLinha);
                this.strOut.append("@\".\\connect_io.sql\"" + sQuebraLinha);
            }
            Iterator iteratorArquivosExternos = collectionArquivosExternos.iterator();
            while(iteratorArquivosExternos.hasNext()){
                this.strOut.append(iteratorArquivosExternos.next());
            }
            collectionArquivosExternos = new ArrayList();
            
            Iterator iteratorInterface = collectionInterface.iterator();
            while(iteratorInterface.hasNext()){
                this.strOut.append(iteratorInterface.next());
            }
            collectionInterface = new ArrayList();

            //fim organizacao

            this.strOut.append("@\".\\limpa_definicoes.sql\"" + sQuebraLinha);

            //this.strOut.append("SPOOL OFF\n");
            //this.strOut.append("EXIT");

            // Criando ordemInstalacao
            fileName = nomeDir + "\\ordem_instalacao.sql";
            File file = new File(fileName);
            if(!file.exists())
                file.createNewFile();

            FileWriter fw = new FileWriter(file, false);
            fw.write(strOut.toString(),0,strOut.length());
            fw.close();
        }else{
            // Criando ordemInstalacao geral
            if(arqsInstala.equals("S")){
                StringBuffer strOut2 = new StringBuffer();
                //fileName = nomeDir.substring(0, nomeDir.lastIndexOf("\\")) + "\\ordemInstalacao.sql";
                fileName = nomeDir + "\\ordem_instalacao.sql";
                File file2 = new File(fileName);
                if(!file2.exists())
                    file2.createNewFile();

                //strOut2.append("SPOOL SCRIPT_STATUS.LOG" + sQuebraLinha);

                strOut2.append("--spool instalacao_v01r01p00_txt.log  -- esse comando passou a ser executado no script dispara_script_instalacao.sql" + sQuebraLinha);
                strOut2.append(sQuebraLinha);
                strOut2.append("@define.sql" + sQuebraLinha);
                strOut2.append("-- Conectar na base do INOUT para obter a data do inicio do processamento" + sQuebraLinha);
                strOut2.append("conn &INOUT_USER/&INOUT_PASS@&TNS" + sQuebraLinha);
                strOut2.append(sQuebraLinha);
                strOut2.append(sQuebraLinha);
                strOut2.append(sQuebraLinha);
                strOut2.append("column \"DATA INICIO\" format A23" + sQuebraLinha);
                strOut2.append("prompt" + sQuebraLinha);
                strOut2.append("prompt =======================" + sQuebraLinha);
                strOut2.append("SELECT TO_CHAR(SYSDATE,'DD/MM/YYYY HH24:MI:SS') AS \"DATA INICIO\" FROM DUAL;" + sQuebraLinha);
                strOut2.append("prompt =======================" + sQuebraLinha);
                strOut2.append("prompt INICIO do Processamento" + sQuebraLinha);
                strOut2.append("prompt =======================" + sQuebraLinha);
                strOut2.append("prompt" + sQuebraLinha);
                strOut2.append(sQuebraLinha);

                File diretorio = new File(nomeDir);
                File[] subdiretorios = diretorio.listFiles();
                for(File subdir : subdiretorios){
                    if(subdir.isDirectory()){
                        //listaSubDir(subdir, dirAtual + subdir.getName() + "\\ordemInstalacao.sql");
                        strOut = new StringBuffer();
                        validaDiretorio(nomeDir + "\\"+ subdir.getName(), "S");
                        strOut2.append("@\".\\" + dirAtual + subdir.getName() + "\\ordem_instalacao.sql" + "\"" + sQuebraLinha);
                    }
                }

                strOut2.append(sQuebraLinha);
                strOut2.append("@\".\\processa_grants.sql\"" + sQuebraLinha);
                strOut2.append(sQuebraLinha);
                strOut2.append("@\".\\processa_grants_sistema.sql\"" + sQuebraLinha);
                strOut2.append(sQuebraLinha);
                //strOut2.append("conn &INOUT_USER/&INOUT_PASS@&TNS" + sQuebraLinha);
                strOut2.append("connect_io.sql" + sQuebraLinha);
                strOut2.append("@\".\\compila_invalidos.sql\"" + sQuebraLinha);
                strOut2.append(sQuebraLinha);
                //strOut2.append("conn &&INTEGRACAO_USER/&&INTEGRACAO_PASS@&&TNS" + sQuebraLinha);
                strOut2.append("connect_it.sql" + sQuebraLinha);
                strOut2.append("@\".\\compila_invalidos.sql\"" + sQuebraLinha);
                
                strOut2.append(sQuebraLinha);
                //strOut2.append("@define.sql" + sQuebraLinha);
                //strOut2.append("-- Conectar na base do INOUT para obter a data de fim do processamento" + sQuebraLinha);
                //strOut2.append("-- utilizar a mesma base utilizada no inicio do processamento" + sQuebraLinha);
                //strOut2.append("conn &INOUT_USER/&INOUT_PASS@&TNS" + sQuebraLinha);
                strOut2.append("prompt" + sQuebraLinha);
                strOut2.append("prompt =======================" + sQuebraLinha);
                strOut2.append("SELECT 'Finalizado em: '||TO_CHAR(SYSDATE,'DD/MM/YYYY HH24:MI:SS') AS \"DATA FIM\" FROM DUAL;" + sQuebraLinha);
                strOut2.append("prompt =======================" + sQuebraLinha);
                strOut2.append("prompt Fim do Processamento" + sQuebraLinha);
                strOut2.append("prompt =======================" + sQuebraLinha);
                strOut2.append("prompt" + sQuebraLinha);
                strOut2.append("@\"limpa_definicoes.sql\"" + sQuebraLinha);
                strOut2.append(sQuebraLinha);

                strOut2.append("spool off" + sQuebraLinha);
                strOut2.append("exit" + sQuebraLinha);

                FileWriter fw2 = new FileWriter(file2, false);
                fw2.write(strOut2.toString(),0,strOut2.length());
                fw2.close();

            }
        }
	}

	/**************************************************************************
	 * <b>Listar subDiretórios</b>
	 * @param subDir
	 **************************************************************************/
    private void listaSubDir(File subDir, String pDirAtual){
        int nArqs = 0;
        File[] subdiretorios = subDir.listFiles();

        //String tipoPasta = ""; // Tabela / Interface / ArquivosExternos

        for(File subdir : subdiretorios){
            StringBuffer dirAtual = new StringBuffer();
            dirAtual.append(pDirAtual);
            if(subdir.isDirectory()){
                dirAtual.append(subdir.getName() + "\\");
                if(tipoPasta.equals("INTEGRACAO")){
                    if(subdir.getName().equals("INOUT")){
                        this.tipoPasta = "";
                    }
                }else{
                    this.tipoPasta = "";
                    if(subdir.getName().equals("INTEGRACAO")){
                        this.tipoPasta = "INTEGRACAO";
                    }else if(!subdir.getName().equals("interface.sql")){
                        this.tipoPasta = "Outros";
                    }else if(!subdir.getName().equals("Sistemas")){
                        this.tipoPasta = "Sistemas";
                    }
                }
                listaSubDir(subdir, dirAtual.toString());
            }else{
                if(subdir.getName().toString().endsWith(".sql")){
                    //if(chPastas.isSelected()){
                    //    strOut.append("Prompt ***************************************************************************************\n");
                    //    strOut.append("Prompt *   " + dirAtual + "\n");
                    //    strOut.append("Prompt ***************************************************************************************\n");
                    //}

                    //if(chArquivos.isSelected()){
                    //    strOut.append("Prompt ##################################################\n");
                    //    strOut.append("Prompt #   " + dirAtual + subdir.getName() + "\n");
                    //    strOut.append("Prompt ##################################################\n");
                    //}

                    //strOut.append("@\"" + dirAtual + subdir.getName() + "\"\n");
                    jTextArea1.append(dirAtual + subdir.getName() + "" + sQuebraLinha);

                    if(subdir.getName().equals("interface.sql")){
                        //collectionInterface.add(dirAtual + subdir.getName());
                        if(chPastas.isSelected()){
                            collectionInterface.add("Prompt ***************************************************************************************" + sQuebraLinha);
                            collectionInterface.add("Prompt *   " + dirAtual + "" + sQuebraLinha);
                            collectionInterface.add("Prompt ***************************************************************************************" + sQuebraLinha);
                        }

                        if(chArquivos.isSelected()){
                            collectionInterface.add("Prompt ##################################################" + sQuebraLinha);
                            collectionInterface.add("Prompt #   " + dirAtual + subdir.getName() + "" + sQuebraLinha);
                            collectionInterface.add("Prompt ##################################################" + sQuebraLinha);
                        }
                        collectionInterface.add("@\"" + dirAtual + subdir.getName() + "\"" + sQuebraLinha);
                    }else if(tipoPasta.equals("Outros")){
                        //collectionArquivosExternos.add(dirAtual + subdir.getName());
                        if(chPastas.isSelected()){
                            collectionArquivosExternos.add("Prompt ***************************************************************************************" + sQuebraLinha);
                            collectionArquivosExternos.add("Prompt *   " + dirAtual + "" + sQuebraLinha);
                            collectionArquivosExternos.add("Prompt ***************************************************************************************" + sQuebraLinha);
                        }

                        if(chArquivos.isSelected()){
                            collectionArquivosExternos.add("Prompt ##################################################" + sQuebraLinha);
                            collectionArquivosExternos.add("Prompt #   " + dirAtual + subdir.getName() + "" + sQuebraLinha);
                            collectionArquivosExternos.add("Prompt ##################################################" + sQuebraLinha);
                        }
                        collectionArquivosExternos.add("@\"" + dirAtual + subdir.getName() + "\"" + sQuebraLinha);
                    }else if(tipoPasta.equals("INTEGRACAO")){
                        if(chPastas.isSelected()){
                            collectionIntegracao.add("Prompt ***************************************************************************************" + sQuebraLinha);
                            collectionIntegracao.add("Prompt *   " + dirAtual + sQuebraLinha);
                            collectionIntegracao.add("Prompt ***************************************************************************************" + sQuebraLinha);
                        }

                        if(chArquivos.isSelected()){
                            collectionIntegracao.add("Prompt ##################################################" + sQuebraLinha);
                            collectionIntegracao.add("Prompt #   " + dirAtual + subdir.getName() + sQuebraLinha);
                            collectionIntegracao.add("Prompt ##################################################" + sQuebraLinha);
                        }
                        collectionIntegracao.add("@\"" + dirAtual + subdir.getName() + "\"" + sQuebraLinha);
                    }else if(tipoPasta.equals("Sistema")){
                        if(chPastas.isSelected()){
                            collectionSistemas.add("Prompt ***************************************************************************************" + sQuebraLinha);
                            collectionSistemas.add("Prompt *   " + dirAtual + sQuebraLinha);
                            collectionSistemas.add("Prompt ***************************************************************************************" + sQuebraLinha);
                        }

                        if(chArquivos.isSelected()){
                            collectionSistemas.add("Prompt ##################################################" + sQuebraLinha);
                            collectionSistemas.add("Prompt #   " + dirAtual + subdir.getName() + sQuebraLinha);
                            collectionSistemas.add("Prompt ##################################################" + sQuebraLinha);
                        }
                        collectionSistemas.add("@\"" + dirAtual + subdir.getName() + "\"" + sQuebraLinha);
                    }
                }
            }
        }
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SfwValidaScripts().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chArquivos;
    private javax.swing.JCheckBox chGeral;
    private javax.swing.JCheckBox chPastas;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField txDefine;
    private javax.swing.JTextField txDiretorio;
    // End of variables declaration//GEN-END:variables

}
