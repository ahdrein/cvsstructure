package cvsstructure.gui;


import cvsstructure.excel.ReadExcel;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.LineNumberReader;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractListModel;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Mapeamento.java
 *
 * Created on 18/09/2009, 19:19:02
 */


/**
 *
 * @author andrein
 */
public class SfwMapeamentoFrame extends javax.swing.JFrame {
    DefaultListModel model = new DefaultListModel();
    DefaultListModel modelTags = new DefaultListModel();
    DefaultListModel modelTabelas = new DefaultListModel();
    DefaultListModel modelLinhas = new DefaultListModel();

    public String arrTabelas[][] = new String[1000][1000];
    private String sUsername = "SFWIOAHD";
    int contador=0;

    /** Creates new form Mapeamento */
    public SfwMapeamentoFrame() {
        initComponents();
        //listViewTabela.setModel(model);
        jList1.setModel(modelTags);
        jListTabelas.setModel(modelTabelas);
        jListLinhas.setModel(modelLinhas);

        //String nomes[] = {"SW", "IS", "CE","BS", "RF", "XX"};
        //cbSistema = new JComboBox(nomes);

        //DefaultListModel aModel = new DefaultListModel();
        //aModel.addElement(nomes);
        //cbSistema.setModel((ComboBoxModel) aModel);

        ArrayList arrayList = new ArrayList();
        arrayList.add("SW");
        arrayList.add("IS");
        arrayList.add("EX");
        arrayList.add("CE");
        arrayList.add("CI");
        arrayList.add("BS");
        arrayList.add("  ");
        ArrayListComboBoxModel model = new ArrayListComboBoxModel(arrayList);
        cbSistema.setModel(model);
        cbSistema.setSelectedIndex(0);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txDescricao = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txArquivoTexto = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txIdInterface = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txUsername = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txExecutavel = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        cbSistema = new javax.swing.JComboBox();
        jPanel13 = new javax.swing.JPanel();
        chSaida = new javax.swing.JCheckBox();
        chEntrada = new javax.swing.JCheckBox();
        chOutros = new javax.swing.JCheckBox();
        jPanel12 = new javax.swing.JPanel();
        rbFTP = new javax.swing.JRadioButton();
        rbSSh = new javax.swing.JRadioButton();
        rbNenhum = new javax.swing.JRadioButton();
        jPanel11 = new javax.swing.JPanel();
        chTXT = new javax.swing.JCheckBox();
        chXML = new javax.swing.JCheckBox();
        chRFC = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        txIdEvento = new javax.swing.JTextField();
        txIdParceiro = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jPanel15 = new javax.swing.JPanel();
        txSeparador = new javax.swing.JTextField();
        jPanel20 = new javax.swing.JPanel();
        txCmdExtra = new javax.swing.JTextField();
        jPanel24 = new javax.swing.JPanel();
        txCondicaoWhere = new javax.swing.JTextField();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        jPanel14 = new javax.swing.JPanel();
        txBlockName = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txIdSap = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txOrder = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jPanel23 = new javax.swing.JPanel();
        chIntMapeamento = new javax.swing.JCheckBox();
        chProcessamentoDireto = new javax.swing.JCheckBox();
        jPanel21 = new javax.swing.JPanel();
        chCTLFixo = new javax.swing.JCheckBox();
        txCLTName = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jPanel22 = new javax.swing.JPanel();
        txNomeODBC = new javax.swing.JTextField();
        txTabRef = new javax.swing.JTextField();
        txODBCUser = new javax.swing.JTextField();
        txODBCPass = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        txLocalXLS = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jToggleButton1 = new javax.swing.JToggleButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel18 = new javax.swing.JLabel();
        jToggleButton2 = new javax.swing.JToggleButton();
        jPanel17 = new javax.swing.JPanel();
        txLocalTXT = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel19 = new javax.swing.JLabel();
        jToggleButton3 = new javax.swing.JToggleButton();
        jToggleButton4 = new javax.swing.JToggleButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jListLinhas = new javax.swing.JList();
        btAdd = new javax.swing.JButton();
        btRemove = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jButton6 = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        jListTabelas = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Mapemanento Interfaces");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Informações de Saida/Entrada"));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Dados da Interface"));

        jLabel1.setText("Sistema:");

        jLabel2.setText("Descrição:");

        txArquivoTexto.setBackground(new java.awt.Color(255, 255, 204));

        jLabel3.setText("Arquivo Texto:");

        txIdInterface.setBackground(new java.awt.Color(255, 255, 204));

        jLabel9.setText("Id_Interfaces:");

        txUsername.setBackground(new java.awt.Color(255, 255, 204));
        txUsername.setText("ADM");

        jLabel10.setText("Username:");

        txExecutavel.setBackground(new java.awt.Color(255, 255, 204));
        txExecutavel.setText("IMPORTADOR_IN_OUT_NEW.EXE");

        jLabel11.setText("Executavel");

        cbSistema.setBackground(new java.awt.Color(255, 255, 204));

        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder("Saida / Entrada"));

        chSaida.setSelected(true);
        chSaida.setText("Saida");

        chEntrada.setText("Entrada");

        chOutros.setText("Outros");

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chSaida)
                    .addComponent(chOutros)
                    .addComponent(chEntrada))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addComponent(chSaida)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chEntrada)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(chOutros))
        );

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder("FTP / SSH"));

        rbFTP.setText("FTP");

        rbSSh.setText("SSH");
        rbSSh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSShActionPerformed(evt);
            }
        });

        rbNenhum.setSelected(true);
        rbNenhum.setText("Nenhum");

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(rbNenhum)
                .addContainerGap())
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rbSSh)
                .addContainerGap(26, Short.MAX_VALUE))
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rbFTP)
                .addContainerGap(28, Short.MAX_VALUE))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addComponent(rbFTP)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbSSh)
                .addGap(3, 3, 3)
                .addComponent(rbNenhum))
        );

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("Tipos de Interface"));

        chTXT.setSelected(true);
        chTXT.setText("TXT");

        chXML.setText("XML");

        chRFC.setText("RFC");

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chTXT)
                    .addComponent(chXML)
                    .addComponent(chRFC))
                .addContainerGap(47, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addComponent(chTXT)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chXML)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chRFC)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addGap(45, 45, 45)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txDescricao, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
                                .addComponent(cbSistema, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txIdInterface, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3)
                                .addComponent(jLabel10)
                                .addComponent(jLabel11))
                            .addGap(23, 23, 23)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txArquivoTexto, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
                                .addComponent(txUsername, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
                                .addComponent(txExecutavel, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE))))
                    .addComponent(jLabel1)
                    .addComponent(jLabel9)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(304, 304, 304))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cbSistema, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txIdInterface, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txArquivoTexto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(txUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txExecutavel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(132, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Interface", jPanel1);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Informações de Saida/Entrada"));

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Eventos"));

        jLabel4.setText("ID_EVENTO:");

        jLabel5.setText("ID_PARCEIRO:");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(txIdParceiro, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                        .addComponent(txIdEvento, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txIdEvento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addComponent(txIdParceiro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel15.setBorder(javax.swing.BorderFactory.createTitledBorder("Separador"));

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel15Layout.createSequentialGroup()
                .addComponent(txSeparador, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txSeparador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jPanel20.setBorder(javax.swing.BorderFactory.createTitledBorder("Comandos Extra"));

        javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);
        jPanel20.setLayout(jPanel20Layout);
        jPanel20Layout.setHorizontalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addComponent(txCmdExtra, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel20Layout.setVerticalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txCmdExtra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jPanel24.setBorder(javax.swing.BorderFactory.createTitledBorder("Where ex: tp.id_notafiscal = oif.pk_number_01"));

        javax.swing.GroupLayout jPanel24Layout = new javax.swing.GroupLayout(jPanel24);
        jPanel24.setLayout(jPanel24Layout);
        jPanel24Layout.setHorizontalGroup(
            jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel24Layout.createSequentialGroup()
                .addComponent(txCondicaoWhere, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel24Layout.setVerticalGroup(
            jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txCondicaoWhere, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jPanel14.setBorder(javax.swing.BorderFactory.createTitledBorder("Informações SAP"));

        jLabel6.setText("Block Name");

        jLabel7.setText("ID_SAP");

        txOrder.setText("1");

        jLabel8.setText("Order");

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addGap(24, 24, 24)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txOrder, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE)
                    .addComponent(txIdSap, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE)
                    .addComponent(txBlockName, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txBlockName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txIdSap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)))
        );

        jTabbedPane3.addTab("SAP", jPanel14);

        jPanel23.setBorder(javax.swing.BorderFactory.createTitledBorder("Mapeamento - IT"));

        chIntMapeamento.setText("Int Mapeamento");

        chProcessamentoDireto.setText("Processamento Direto");

        javax.swing.GroupLayout jPanel23Layout = new javax.swing.GroupLayout(jPanel23);
        jPanel23.setLayout(jPanel23Layout);
        jPanel23Layout.setHorizontalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel23Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel23Layout.createSequentialGroup()
                        .addComponent(chIntMapeamento, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                        .addGap(280, 280, 280))
                    .addGroup(jPanel23Layout.createSequentialGroup()
                        .addComponent(chProcessamentoDireto)
                        .addContainerGap(280, Short.MAX_VALUE))))
        );
        jPanel23Layout.setVerticalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel23Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chIntMapeamento)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chProcessamentoDireto)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("Processamento", jPanel23);

        jPanel21.setBorder(javax.swing.BorderFactory.createTitledBorder("CTL"));

        chCTLFixo.setSelected(true);
        chCTLFixo.setText("CTL Fixo");

        jLabel12.setText("CTL Name:");

        javax.swing.GroupLayout jPanel21Layout = new javax.swing.GroupLayout(jPanel21);
        jPanel21.setLayout(jPanel21Layout);
        jPanel21Layout.setHorizontalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel21Layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(jLabel12)
                        .addGap(18, 18, 18)
                        .addComponent(txCLTName, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE))
                    .addGroup(jPanel21Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(chCTLFixo)))
                .addContainerGap())
        );
        jPanel21Layout.setVerticalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txCLTName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chCTLFixo))
        );

        jTabbedPane3.addTab("CTL", jPanel21);

        jPanel22.setBorder(javax.swing.BorderFactory.createTitledBorder("ODBC"));

        jLabel13.setText("Nome ODBC");

        jLabel14.setText("Tab. Ref.");

        jLabel15.setText("User:");

        jLabel16.setText("Pass:");

        javax.swing.GroupLayout jPanel22Layout = new javax.swing.GroupLayout(jPanel22);
        jPanel22.setLayout(jPanel22Layout);
        jPanel22Layout.setHorizontalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel22Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13)
                    .addComponent(jLabel14))
                .addGap(27, 27, 27)
                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txTabRef, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
                    .addComponent(txNomeODBC, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15)
                    .addComponent(jLabel16))
                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel22Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(txODBCPass, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel22Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(txODBCUser, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        jPanel22Layout.setVerticalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel22Layout.createSequentialGroup()
                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txNomeODBC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txODBCUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txTabRef, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txODBCPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(jLabel16))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("ODBC", jPanel22);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jTabbedPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel24, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTabbedPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel20, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel15, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(772, 772, 772))
        );

        jTabbedPane1.addTab("Saida / Entrada", jPanel2);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Configurações"));

        txLocalXLS.setText("C:\\Andrews\\!Compartilhados\\!newsChamados\\!TXT Versão Base\\182013 - Ordem Venda - 12-07-2010 - v2009\\Interfaces_Export_Sys_Oficial_Fev_2009_ES_V06_R03_P26.xls");

        jLabel17.setText("Local Arquivo Excel:");

        jButton1.setText("Gerar Arquivos TXT");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Gerar inserts das tabelas tmp do inout");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Compara campos do Excel com os campos da Tab_Columns");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Gerar Arquivos XML");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jToggleButton1.setText("...");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jLabel18.setText("Barra de progresso:");

        jToggleButton2.setText("Corrigir no banco");
        jToggleButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel17)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(txLocalXLS, javax.swing.GroupLayout.PREFERRED_SIZE, 552, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jToggleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton4)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addGap(54, 54, 54)
                        .addComponent(jToggleButton2))
                    .addComponent(jButton2)
                    .addComponent(jButton1)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 602, Short.MAX_VALUE)
                    .addComponent(jLabel18))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txLocalXLS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToggleButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jToggleButton2))
                .addGap(26, 26, 26)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(213, 213, 213))
        );

        jTabbedPane1.addTab("Config. Excel", jPanel3);

        jPanel17.setBorder(javax.swing.BorderFactory.createTitledBorder("Valida TXT"));

        txLocalTXT.setText("C:\\Andrews\\Softway\\IN_OUT_560\\Ldr\\Txt\\embalagem\\EMBDIT_YYYYMMDDHHMISS_20100719142819.txt");
        txLocalTXT.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txLocalTXTMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                txLocalTXTMouseEntered(evt);
            }
        });
        txLocalTXT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txLocalTXTKeyPressed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane3.setViewportView(jTable1);

        jLabel19.setText("Local Arquivo Texto:");

        jToggleButton3.setText("Validar");
        jToggleButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton3ActionPerformed(evt);
            }
        });

        jToggleButton4.setText("...");
        jToggleButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton4ActionPerformed(evt);
            }
        });

        jListLinhas.setBorder(javax.swing.BorderFactory.createTitledBorder("Selecione a linha que deseja conferir:"));
        jListLinhas.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane4.setViewportView(jListLinhas);

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel17Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 606, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel17Layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 606, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel17Layout.createSequentialGroup()
                        .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel19)
                            .addGroup(jPanel17Layout.createSequentialGroup()
                                .addComponent(txLocalTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jToggleButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(5, 5, 5))
                    .addGroup(jPanel17Layout.createSequentialGroup()
                        .addComponent(jToggleButton3)
                        .addContainerGap(547, Short.MAX_VALUE))))
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txLocalTXT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToggleButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jToggleButton3)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Valida TXT", jPanel17);

        btAdd.setText("add");
        btAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddActionPerformed(evt);
            }
        });

        btRemove.setText("remove");

        jList1.setBorder(javax.swing.BorderFactory.createTitledBorder("Abas Excel"));
        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jList1);

        jButton6.setText("Ler Excel");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jListTabelas.setBorder(javax.swing.BorderFactory.createTitledBorder("Selecione a Tabela que deseja conferir: [Carregado do Excel]"));
        jListTabelas.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane5.setViewportView(jListTabelas);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btRemove))
                    .addComponent(jButton6)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 659, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btRemove)
                            .addComponent(btAdd))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton6)))
                .addContainerGap())
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("Saida");
        jTabbedPane1.getAccessibleContext().setAccessibleDescription("Saida");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rbSShActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSShActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_rbSShActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        jProgressBar1.setIndeterminate(true);

        Thread tThread = new Thread(new Runnable() {
        public void run() {
            ReadExcel readExcel = new ReadExcel();
            readExcel.setInputFile(txLocalXLS.getText().toString());
            //readExcel.setTagExcel(txTagExcel.getText().toString());
            try {
                Object[] sSelectedUser = jList1.getSelectedValues();
                if(sSelectedUser.length != 0){
                    // Obtendo as bases selecionadas
                    for(int j=0; j < sSelectedUser.length; j++){
                        jLabel18.setText((String)sSelectedUser[j]);
                        readExcel.setTagExcel( (String)sSelectedUser[j]);
                        readExcel.gerarArquivoXML();
                    }
                }
            } catch (IOException ex) {
                Logger.getLogger(SfwMapeamentoFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        });
        tThread.start();
}//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        jProgressBar1.setIndeterminate(true);

        Thread tThread = new Thread(new Runnable() {
        public void run() {
            ReadExcel readExcel = new ReadExcel();
            readExcel.setInputFile(txLocalXLS.getText().toString());
            //readExcel.setTagExcel(txTagExcel.getText().toString());
            try {
                Object[] sSelectedUser = jList1.getSelectedValues();
                if(sSelectedUser.length != 0){
                    // Obtendo as bases selecionadas
                    for(int j=0; j < sSelectedUser.length; j++){
                        jLabel18.setText("Comparando Aba da Planilha: " + (String)sSelectedUser[j]);
                        readExcel.setTagExcel( (String)sSelectedUser[j]);
                        readExcel.comparaCamposTabColumn();
                    }
                }
                jProgressBar1.setIndeterminate(false);
            } catch (IOException ex) {
                Logger.getLogger(SfwMapeamentoFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        });
         tThread.start();
}//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        ReadExcel readExcel = new ReadExcel();
        readExcel.setInputFile(txLocalXLS.getText().toString());
        //readExcel.setTagExcel(txTagExcel.getText().toString());
        try {
            Object[] sSelectedUser = jList1.getSelectedValues();
            if(sSelectedUser.length != 0){
                // Obtendo as bases selecionadas
                for(int j=0; j < sSelectedUser.length; j++){
                    readExcel.setTagExcel( (String)sSelectedUser[j]);
                    readExcel.gerarScriptsTabelasTMP();
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(SfwMapeamentoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
}//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        ReadExcel readExcel = new ReadExcel();
        readExcel.setInputFile(txLocalXLS.getText().toString());
        //txTagExcel.getText().toString();
        try {
            Object[] sSelectedUser = jList1.getSelectedValues();
            if(sSelectedUser.length != 0){
                // Obtendo as bases selecionadas
                for(int j=0; j < sSelectedUser.length; j++){
                    readExcel.setTagExcel( (String)sSelectedUser[j]);
                    readExcel.gerarArquivoTXT();
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(SfwMapeamentoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
}//GEN-LAST:event_jButton1ActionPerformed

    private void btAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddActionPerformed
        ///////String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
        boolean flag = true;
        // View/Tabela
        //if(txViewTabela.getText().isEmpty()){
        //    flag = false;
        //    JOptionPane.showMessageDialog(null, "View/Tabela não pode ser nulo!");
        //}

        //String[] strCampos = txCampos.getText().split(";");
        //String[] strTamanhos = txTamanhos.getText().split(";");
        //for(int i=0;i<strCampos.length;i++){
        //    arrCampos[i][0] = strCampos[i];                   //Campos
        //    arrCampos[i][1] = strTamanhos[i];                 //Tamanhos
        //    arrCampos[i][2] = "CHAR";                         //Tipo
        //}

        if (flag){
            //arrTabelas[contador][0] = txViewTabela.getText();                   //Tabela
            //arrTabelas[contador][1] = txCampos.getText();                       //Campos
            //arrTabelas[contador][2] = txTamanhos.getText();                     //Tamanhos
            //arrTabelas[contador][3] = txPackageProcedure.getText();             //Package
            //arrTabelas[contador][4] = txPackageProcedureParametros.getText();   //Parametros Package
            //arrTabelas[contador][5] = txViewTabelaPai.getText();                //Tabela Pai
            //arrTabelas[contador][6] = txSeparador.getText();                    //Separador
            arrTabelas[contador][7] = txCmdExtra.getText();                     //Comandos Extras
            arrTabelas[contador][8] = txCLTName.getText();                      //
            arrTabelas[contador][9] = txNomeODBC.getText();                     //
            arrTabelas[contador][10] = txODBCUser.getText();                    //
            arrTabelas[contador][11] = txODBCPass.getText();                    //
            arrTabelas[contador][12] = txOrder.getText();                       //
            arrTabelas[contador][13] = txTabRef.getText();                      //
            contador += 1;

            //model.addElement(txViewTabela.getText().toUpperCase());
        }
}//GEN-LAST:event_btAddActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        ReadExcel readExcel = new ReadExcel();
        readExcel.setInputFile(txLocalXLS.getText().toString());
        modelTags.removeAllElements();
        try {
            String[] sheets = readExcel.readTagsOfExcel();
            for(int i = 0; i < sheets.length ; i++){
                modelTags.addElement(sheets[i]);
            }
        } catch (IOException ex) {
            Logger.getLogger(SfwMapeamentoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }catch(Exception ex){
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        JFileChooser fc = new JFileChooser();

        // restringe a amostra a diretorios apenas
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        int res = fc.showOpenDialog(null);

        if(res == JFileChooser.APPROVE_OPTION){
            File diretorio = fc.getSelectedFile();
            //JOptionPane.showMessageDialog(null, "Voce escolheu o diretório: " + diretorio.getName());
            txLocalXLS.setText(diretorio.getAbsolutePath());
        }
        else
            JOptionPane.showMessageDialog(null, "Voce nao selecionou nenhum diretorio.");
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void jToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton2ActionPerformed
        jProgressBar1.setIndeterminate(true);

        Thread tThread = new Thread(new Runnable() {
        public void run() {
            ReadExcel readExcel = new ReadExcel();
            readExcel.setInputFile(txLocalXLS.getText().toString());
            //readExcel.setTagExcel(txTagExcel.getText().toString());
            try {
                Object[] sSelectedUser = jList1.getSelectedValues();
                if(sSelectedUser.length != 0){
                    // Obtendo as bases selecionadas
                    for(int j=0; j < sSelectedUser.length; j++){
                        jLabel18.setText((String)sSelectedUser[j]);
                        readExcel.setTagExcel( (String)sSelectedUser[j]);
                        readExcel.corrigirCampos();
                    }
                }
                jProgressBar1.setIndeterminate(false);
            } catch (IOException ex) {
                Logger.getLogger(SfwMapeamentoFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        });
         tThread.start();
    }//GEN-LAST:event_jToggleButton2ActionPerformed

    private void jToggleButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton3ActionPerformed
        String[][] dados = null;
        String[] colunas = null;
        DefaultTableModel modelo = null;

        dados = new String [][]{
            {"",""}
        };

        //dados = new String [][]{
        //             {"SP","Sao Paulo"},
        //             {"RJ","Rio de Janeiro"},
        //             {"RN","Rio Grande do Norte"},
        //             {"PR","Parana"}
        //};
        ReadExcel readExcel = new ReadExcel();
        readExcel.setInputFile(txLocalXLS.getText().toString());

        //modelTags.removeAllElements();
        //try {
        //    String[] sheets = readExcel.readTagsOfExcel();
        //    for(int i = 0; i < sheets.length ; i++){
        //        modelTags.addElement(sheets[i]);
        //    }
        //} catch (IOException ex) {
        //    Logger.getLogger(SfwMapeamentoFrame.class.getName()).log(Level.SEVERE, null, ex);
        //}catch(Exception ex){
        //    ex.printStackTrace();
        //}

        try {
            Object[] sSelectedAba = jList1.getSelectedValues();
            if(sSelectedAba.length != 0){

                readExcel.setTagExcel((String)sSelectedAba[0] );

                Object[] sSelectedTabela = jListTabelas.getSelectedValues();
                if(sSelectedTabela.length != 0){

                    Iterator icolunas = readExcel.readFieldsOfTable((String)sSelectedTabela[0]).iterator();
                    //int i=1;
                    modelo = new DefaultTableModel(colunas, 0);
                    for (; icolunas.hasNext();) {
                        //colunas = new String[i];
                        //colunas[i-1] = icolunas.next().toString();
                        //i++;
                        modelo.addColumn(icolunas.next().toString());
                    }
                    //modelo = new DefaultTableModel(colunas, 0);

                    Object[] sSelectedLinha = jListLinhas.getSelectedValues();
                    if(sSelectedLinha.length != 0){
                        //String[] row = new String []{bjFormula.getSCodigoMateriaPrima().getSCodigo(),bjFormula.getNQtde().toString()};

                        ArrayList<String>  squares = readExcel.readWeigthFieldsOfTable(  (String)sSelectedTabela[0],
                                                                                         (String)sSelectedLinha[0]
                                                                                      );
                        String[] s;

                        Iterator iterator = squares.iterator();
                        String[] row = null;
                        int j=1;
                        for (; iterator.hasNext();) {
                            String[] rowAux = null;
                            if(row != null){
                                rowAux = row.clone();
                            }
                            row = new String[j];
                            if(rowAux != null){
                                for(int i = 0; i < rowAux.length ; i++){
                                    row[i] = rowAux[i];
                                }
                            }

                            row[j-1] = iterator.next().toString();
                            j++;


                        }
                        modelo.addRow(row);
                        /*
                        String[] row = new String []{ readExcel.readFieldsOfTable(
                                                                                    (String)sSelectedTabela[1],
                                                                                    (String)sSelectedLinha[1]
                                                                                    )
                                                    };
                        mode.addRow(row);
                         * */
                    }
                    jTable1.setModel(modelo);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(SfwMapeamentoFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        

        // Ao inves de passar direto, colocamos os dados em um modelo
        
        


    }//GEN-LAST:event_jToggleButton3ActionPerformed

    private void jToggleButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton4ActionPerformed
        JFileChooser fc = new JFileChooser();

        // restringe a amostra a diretorios apenas
        //fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        int res = fc.showOpenDialog(null);

        if(res == JFileChooser.APPROVE_OPTION){
            File diretorio = fc.getSelectedFile();
            //JOptionPane.showMessageDialog(null, "Voce escolheu o diretório: " + diretorio.getName());
            txLocalTXT.setText(diretorio.getAbsolutePath());

            String readLine;
            FileReader rd;
            try {
                rd = new FileReader(txLocalTXT.getText());
                LineNumberReader scanner = new LineNumberReader(rd);
                while ((readLine = scanner.readLine()) != null) {
                    modelLinhas.addElement(readLine);
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(SfwMapeamentoFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(SfwMapeamentoFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else
            JOptionPane.showMessageDialog(null, "Voce nao selecionou nenhum diretorio.");
    }//GEN-LAST:event_jToggleButton4ActionPerformed

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        ReadExcel readExcel = new ReadExcel();
        readExcel.setInputFile(txLocalXLS.getText().toString());
        
        Object[] sSelectedUser = jList1.getSelectedValues();
        if(sSelectedUser.length != 0){
            // Obtendo as bases selecionadas
            for(int j=0; j < sSelectedUser.length; j++){
                readExcel.setTagExcel( (String)sSelectedUser[j]);
                modelTabelas.removeAllElements();
                try {
                    ArrayList tables = readExcel.readTablesOfExcelAba();
                    for(int i = 0; i < tables.size() ; i++){
                        modelTabelas.addElement(tables.get(i));
                    }
                }catch(Exception ex){
                    ex.printStackTrace();
                }
            }
        }


    }//GEN-LAST:event_jList1MouseClicked

    private void txLocalTXTMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txLocalTXTMouseEntered

    }//GEN-LAST:event_txLocalTXTMouseEntered

    private void txLocalTXTMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txLocalTXTMouseClicked

    }//GEN-LAST:event_txLocalTXTMouseClicked

    private void txLocalTXTKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txLocalTXTKeyPressed
        File fileScripts = new File(txLocalTXT.getText());
        if(fileScripts.exists()){
            if(evt.getKeyCode() == 10){
                String readLine;
                FileReader rd;
                modelLinhas.removeAllElements();
                try {
                    rd = new FileReader(txLocalTXT.getText());
                    LineNumberReader scanner = new LineNumberReader(rd);
                    while ((readLine = scanner.readLine()) != null) {
                        modelLinhas.addElement(readLine);
                    }
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(SfwMapeamentoFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(SfwMapeamentoFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }else{
            JOptionPane.showMessageDialog(null, "Arquivo não encontrado !");
        }
    }//GEN-LAST:event_txLocalTXTKeyPressed

	/**************************************************************************
	 * <b>Gerar scripts das interfaces</b>
	 **************************************************************************/
	private void gerarInterfaces() throws Exception{
        String fileName = "interface.sql";
        String fileNameScripts = "";

        new File(".\\"+sUsername).mkdir();
        new File(".\\"+sUsername+"\\Scripts").mkdir();
		if((chSaida.isSelected() ? "S" : "E").trim().equals("S")){
			fileNameScripts = ".\\"+sUsername+"\\Scripts\\" + cbSistema.getSelectedItem().toString().trim().toLowerCase() + "_out_" + txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase() + "\\INOUT\\Interface\\" + fileName;
			//fileName = ".\\"+sUsername+"\\Arquivos\\" + txIdSistema.getText().trim().toLowerCase() + "_out_" + txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase() + "\\INOUT\\Interface\\" + fileName;

            new File(".\\"+sUsername+"\\Scripts\\"+ cbSistema.getSelectedItem().toString().trim().toLowerCase() + "_out_" + txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase()).mkdir();
            new File(".\\"+sUsername+"\\Scripts\\"+ cbSistema.getSelectedItem().toString().trim().toLowerCase() + "_out_" + txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase()+"\\INOUT").mkdir();
            new File(".\\"+sUsername+"\\Scripts\\"+ cbSistema.getSelectedItem().toString().trim().toLowerCase() + "_out_" + txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase()+"\\INOUT\\Interface").mkdir();

		}else if((chSaida.isSelected() ? "S" : "E").trim().equals("E")){
			fileNameScripts = ".\\"+sUsername+"\\Scripts\\" + cbSistema.getSelectedItem().toString().trim().toLowerCase() + "_in_" + txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase() + "\\INOUT\\Interface\\" + fileName;
			//fileName = ".\\"+sUsername+"\\Arquivos\\" + txIdSistema.getText().trim().toLowerCase() + "_in_" + txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase() + "\\INOUT\\Interface\\" + fileName;

            new File(".\\"+sUsername+"\\Scripts\\"+ cbSistema.getSelectedItem().toString().trim().toLowerCase() + "_in_" + txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase()).mkdir();
            new File(".\\"+sUsername+"\\Scripts\\"+ cbSistema.getSelectedItem().toString().trim().toLowerCase() + "_in_" + txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase()+"\\INOUT").mkdir();
            new File(".\\"+sUsername+"\\Scripts\\"+ cbSistema.getSelectedItem().toString().trim().toLowerCase() + "_in_" + txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase()+"\\INOUT\\Interface").mkdir();
		}else{
			fileNameScripts = ".\\"+sUsername+"\\Scripts\\" + txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase() + "\\INOUT\\Interface\\" + fileName;
			//fileName = ".\\"+sUsername+"\\Arquivos\\" + txIdInterface.getText().trim().replace("(", "").replace(")", ")").replace(".", "").toLowerCase() + "\\INOUT\\Interface\\" + fileName;

            new File(".\\"+sUsername+"\\Scripts\\"+ txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase()).mkdir();
            new File(".\\"+sUsername+"\\Scripts\\"+ txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase()+"\\INOUT").mkdir();
            new File(".\\"+sUsername+"\\Scripts\\"+ txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase()+"\\INOUT\\Interface").mkdir();
		}


		StringBuffer strOut = new StringBuffer();
		//logMessage("Creating or appending to file " + fileNameScripts);

		strOut.append("conn &&INOUT_USER/&&INOUT_PASS@&&TNS\n\n");
		strOut.append("--  ///////\n");
		strOut.append("--  ///////     Script Gerado a partir do Sistema Gerenciador de Interfaces IN-OUT\n");
		strOut.append("--  ///////     Interface: " + txDescricao.getText() + "\n");
		strOut.append("--  ///////\n\n\n");
		strOut.append("delete from PERMISSAO_TABELA where ID_INTERFACE = '" + txIdInterface.getText() + "';\n\n");
		strOut.append("begin\n");
		strOut.append("   insert into    INTERFACES\n");
		strOut.append("      (ID_INTERFACE,\n");
		strOut.append("      DESCRICAO,\n");
		strOut.append("      NOME_MAQUINA,\n");
		strOut.append("      EXECUTAVEL,\n");
		strOut.append("      USERNAME,\n");
		strOut.append("      TEMPO_MEDIO,\n");
		strOut.append("      TIPO_INTERFACE)\n");
		strOut.append("      values\n");
		strOut.append("      ('" + txIdInterface.getText() + "',\n");
		strOut.append("      '" + txDescricao.getText() + "',\n");
		strOut.append("   	  '&&USER_MACHINE',\n");
		strOut.append("	  '" + txExecutavel.getText() + "',\n");
		strOut.append("	  '" + txUsername.getText() + "',\n");
		strOut.append("	  '0',\n");
		strOut.append("   '" + (chSaida.isSelected() ? "S" : "E") + "');\n");
		strOut.append("exception\n");
		strOut.append("    when dup_val_on_index then\n");
		strOut.append("        update INTERFACES\n");
		strOut.append("        set\n");
		strOut.append("                DESCRICAO = '" + txDescricao.getText() + "',\n");
		strOut.append("                NOME_MAQUINA = '&&USER_MACHINE',\n");
		strOut.append("                EXECUTAVEL = '" + txExecutavel.getText() + "',\n");
		strOut.append("                USERNAME = '" + txUsername.getText() + "',\n");
		strOut.append("                TIPO_INTERFACE = '" + (chSaida.isSelected() ? "S" : "E") + "'\n");
        strOut.append("        where id_interface  = '" + txIdInterface.getText() + "';\n");
		strOut.append("end;\n");
		strOut.append("/\n\n");
		strOut.append("delete from INTERFACE_SAIDA where ID_INTERFACE =  '" + txIdInterface.getText() + "';\n\n");
		strOut.append("insert into SISTEMA_INTERFACE (ID_INTERFACE, ID_SISTEMA) values ('" + txIdInterface.getText() + "' , '" + cbSistema.getSelectedItem() + "');\n\n");
		strOut.append("commit;\n\n\n");
		strOut.append("-- //////\n");
		strOut.append("-- //////  FIM DO SCRIPT\n");
		strOut.append("-- //////");

		// Criando arquivo na pasta de arquivos
        //File file = new File(fileName);
		//if(!file.exists())
		//	file.createNewFile();

        //FileWriter fw = new FileWriter(file, false);
        //fw.write(strOut.toString(),0,strOut.length());
        //fw.close();

        // Criando arquivo na pasta de scripts
        File fileScripts = new File(fileNameScripts);
		if(!fileScripts.exists())
			fileScripts.createNewFile();

		FileWriter fwScripts = new FileWriter(fileScripts, false);
		fwScripts.write(strOut.toString(),0,strOut.length());
		fwScripts.close();
	}

	/**************************************************************************
	 * <b>Exportar Tabelas</b>
	 **************************************************************************/
	private void exportarTabInterface() throws Exception{
        String fileName = "";
        String fileNameScripts;

			//logMessage("Creating or appending to file " + fileName);
			for(int i=0;i<arrTabelas.length;i++){
                if(arrTabelas[i][0] != null){
                    fileName = arrTabelas[i][0].toString().toLowerCase() + ".sql";
                    fileNameScripts = "";

                    new File(".\\"+sUsername).mkdir();
                    new File(".\\"+sUsername+"\\Scripts").mkdir();
                    if((chSaida.isSelected() ? "S" : "E").trim().equals("S")){
                        fileNameScripts = ".\\"+sUsername+"\\Scripts\\" + cbSistema.getSelectedItem().toString().trim().toLowerCase() + "_out_" + txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase() + "\\INOUT\\Tabelas\\" + fileName;
                        //fileName = ".\\"+sUsername+"\\Arquivos\\" + txIdSistema.getText().trim().toLowerCase() + "_out_" + txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase() + "\\INOUT\\Tabelas\\" + fileName;

                        new File(".\\"+sUsername+"\\Scripts\\"+ cbSistema.getSelectedItem().toString().trim().toLowerCase() + "_out_" + txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase()).mkdir();
                        new File(".\\"+sUsername+"\\Scripts\\"+ cbSistema.getSelectedItem().toString().trim().toLowerCase() + "_out_" + txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase()+"\\INOUT").mkdir();
                        new File(".\\"+sUsername+"\\Scripts\\"+ cbSistema.getSelectedItem().toString().trim().toLowerCase() + "_out_" + txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase()+"\\INOUT\\Tabelas").mkdir();

                    }else if((chSaida.isSelected() ? "S" : "E").trim().equals("E")){
                        fileNameScripts = ".\\"+sUsername+"\\Scripts\\" + cbSistema.getSelectedItem().toString().trim().toLowerCase() + "_in_" + txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase() + "\\INOUT\\Tabelas\\" + fileName;
                        //fileName = ".\\"+sUsername+"\\Arquivos\\" + txIdSistema.getText().trim().toLowerCase() + "_in_" + txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase() + "\\INOUT\\Tabelas\\" + fileName;

                        new File(".\\"+sUsername+"\\Scripts\\"+ cbSistema.getSelectedItem().toString().trim().toLowerCase() + "_in_" + txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase()).mkdir();
                        new File(".\\"+sUsername+"\\Scripts\\"+ cbSistema.getSelectedItem().toString().trim().toLowerCase() + "_in_" + txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase()+"\\INOUT").mkdir();
                        new File(".\\"+sUsername+"\\Scripts\\"+ cbSistema.getSelectedItem().toString().trim().toLowerCase() + "_in_" + txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase()+"\\INOUT\\Tabelas").mkdir();
                    }else{
                        fileNameScripts = ".\\"+sUsername+"\\Scripts\\" + txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase() + "\\INOUT\\Tabelas\\" + fileName;
                        //fileName = ".\\"+sUsername+"\\Arquivos\\" + txIdInterface.getText().trim().replace("(", "").replace(")", ")").replace(".", "").toLowerCase() + "\\INOUT\\Tabelas\\" + fileName;

                        new File(".\\"+sUsername+"\\Scripts\\"+ txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase()).mkdir();
                        new File(".\\"+sUsername+"\\Scripts\\"+ txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase()+"\\INOUT").mkdir();
                        new File(".\\"+sUsername+"\\Scripts\\"+ txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase()+"\\INOUT\\Tabelas").mkdir();
                    }

                    StringBuffer strOut = new StringBuffer();
                    //StringBuffer strOutCltFixo = new StringBuffer();

                    //if(rsTabInterface.getCharacterStream("CTL_FIXO") != null){
                    //    BufferedReader brCtlFixo = new BufferedReader(rsTabInterface.getCharacterStream("CTL_FIXO"));

                   //     if (brCtlFixo != null){
                   //         String aux;

                   //         while ((aux=brCtlFixo.readLine())!=null){
                   //             strOutCltFixo.append("exec PRC_UPDATE_CONCATENA_LONG('TAB_INTERFACE','CTL_FIXO','TABLE_NAME','" + (txViewTabela.getText().isEmpty() ? "" : txViewTabela.getText()) + "','" + aux.replace("'", "''") + "');");
                   //             strOutCltFixo.append("\n\n");
                   //         }
                   //     }
                   // }


                    strOut.append("conn &&INOUT_USER/&&INOUT_PASS@&&TNS");
                    strOut.append("\n\n");
                    strOut.append("--  ///////\n");
                    strOut.append("--  ///////     Script Gerado a partir do Sistema Gerenciador de Interfaces IN-OUT\n");
                    strOut.append("--  ///////     TABELA: " + (arrTabelas[i][0].toUpperCase().toString()) + "\n");
                    strOut.append("--  ///////\n\n");
                    strOut.append("delete from DEPEND_HEADER_ITEM_TMP;\n\n");
                    strOut.append("delete from COLUNAS_TAB_INTERFACE where TABLE_NAME = '" + (arrTabelas[i][0].toUpperCase().toString()) + "';\n\n");
                    strOut.append("begin\n\n");
                    strOut.append("  update    TAB_INTERFACE\n");
                    strOut.append("  set       DESCRICAO = '" + (txDescricao.getText().isEmpty() ? "" : txDescricao.getText()) + "',");
                    strOut.append("\n");
                    strOut.append("         CTL_NAME = '" + (arrTabelas[i][0].toUpperCase().toString()) + "',\n");
                    strOut.append("        PREFIX_FILE = '" + (txArquivoTexto.getText().isEmpty() ? "" : txArquivoTexto.getText()) + "',\n");
                    strOut.append("        GERAR_CTL = '" + "S" + "',\n");
                    strOut.append("        PRIORIDADE = " + 0 + ",\n");
                    strOut.append("        ODBC_SOURCE_NAME = '" + (arrTabelas[i][9].isEmpty() ? "" : arrTabelas[i][9]) + "',\n");
                    strOut.append("        ODBC_USER = '" + (arrTabelas[i][10].isEmpty() ? "" : arrTabelas[i][10]) + "',\n");
                    strOut.append("        ODBC_PASSWORD = '" + (arrTabelas[i][11].isEmpty() ? "" : arrTabelas[i][11]) + "',\n");
                    strOut.append("        ODBC_TABLE_NAME = '" + (arrTabelas[i][13].isEmpty() ? "" : arrTabelas[i][13]) + "',\n");
                    strOut.append("        ODBC_WHERE = '" + "" + "',\n");
                    strOut.append("        ODBC_SELECT_ESPECIFICO = '" + "" + "',\n");
                    strOut.append("        TIPO_INTERFACE = '" + "S" + "',\n");
                    strOut.append("        ORACLE_INITIAL_EXTENT = '"+""+"',\n");
                    strOut.append("        ORACLE_NEXT_EXTENT = '"+""+"',\n");
                    strOut.append("        ORACLE_INDEX_TABLESPACE = '"+""+"',\n");
                    strOut.append("        ELIMINAR_REG_EXECUCAO = '"+"N"+"',\n");
                    strOut.append("        ID_SISTEMA = '"+(cbSistema.getSelectedItem().toString().isEmpty() ? "" : cbSistema.getSelectedItem().toString())+"',\n");
                    strOut.append("        PROCEDURE_NAME = '"+(arrTabelas[i][3].isEmpty() ? "" : arrTabelas[i][3])+"',\n");
                    strOut.append("        SEPARADOR = '"+(arrTabelas[i][6].isEmpty() ? "" : arrTabelas[i][6])+"',\n");
                    strOut.append("        CTL_FIXO = null,\n");
                    strOut.append("        TRIGGER1 = null,\n");
                    strOut.append("        TRIGGER2 = null,\n");
                    strOut.append("        COMANDO_EXTRA_LOADER = '"+(arrTabelas[i][7].isEmpty() ? "" : arrTabelas[i][7])+"'\n");
                    strOut.append("  where TABLE_NAME = '"+(arrTabelas[i][0].isEmpty() ? "" : arrTabelas[i][0])+"';\n\n");
                    strOut.append("  if SQL%notfound then\n");
                    strOut.append("        insert into TAB_INTERFACE\n");
                    strOut.append("        (TABLE_NAME, \n        DESCRICAO, \n        CTL_NAME, \n        PREFIX_FILE, \n        GERAR_CTL, \n        PRIORIDADE, \n        ODBC_SOURCE_NAME, \n        ODBC_USER, \n        ODBC_PASSWORD, \n        ODBC_TABLE_NAME, \n        ODBC_WHERE, \n        ODBC_SELECT_ESPECIFICO, \n        TIPO_INTERFACE,\n");
                    strOut.append("        ORACLE_INITIAL_EXTENT, \n        ORACLE_NEXT_EXTENT, \n        ORACLE_INDEX_TABLESPACE, \n        ELIMINAR_REG_EXECUCAO, \n        COMANDO_EXTRA_LOADER, \n        ID_SISTEMA, \n        PROCEDURE_NAME, \n        SEPARADOR)\n");
                    strOut.append("        values\n");
                    strOut.append("        ('" + (arrTabelas[i][0].isEmpty() ? "" : arrTabelas[i][0]) + "', \n        '");
                    strOut.append((txDescricao.getText().isEmpty() ? "" : txDescricao.getText()) + "', \n        '");
                    strOut.append((arrTabelas[i][8].isEmpty() ? "" : arrTabelas[i][8]) + "', \n        '");
                    strOut.append((txArquivoTexto.getText().isEmpty() ? "" : txArquivoTexto.getText()) + "', \n        '");
                    strOut.append("S" + "', \n        ");
                    strOut.append(0 + ", \n        '");
                    strOut.append((arrTabelas[i][9].isEmpty() ? "" : arrTabelas[i][9]) + "', \n        '");
                    strOut.append((arrTabelas[i][10].isEmpty() ? "" : arrTabelas[i][10]) +"', \n        '");
                    strOut.append((arrTabelas[i][11].isEmpty() ? "" : arrTabelas[i][11]) + "', \n        '");
                    strOut.append((arrTabelas[i][13].isEmpty() ? "" : arrTabelas[i][13]) + "', \n        '");
                    strOut.append(""/*rsTabInterface.getString("ODBC_WHERE")*/ + "', \n        '");
                    strOut.append(""/*rsTabInterface.getString("ODBC_SELECT_ESPECIFICO")*/ + "', \n        '");
                    strOut.append(""/*rsTabInterface.getString("TIPO_INTERFACE")*/ + "',\n        ");
                    strOut.append("        '" + ""/*rsTabInterface.getString("ORACLE_INITIAL_EXTENT")*/ + "', \n        '");
                    strOut.append(""/*rsTabInterface.getString("ORACLE_NEXT_EXTENT")*/ + "', \n        '");
                    strOut.append(""/*rsTabInterface.getString("ORACLE_INDEX_TABLESPACE")*/ + "',\n        '" );
                    strOut.append(""/*rsTabInterface.getString("ELIMINAR_REG_EXECUCAO")*/ + "',\n        '");
                    strOut.append((arrTabelas[i][7].isEmpty() ? "" : arrTabelas[i][7]) + "',\n        ");
                    strOut.append("        '" + (cbSistema.getSelectedItem().toString().isEmpty() ? "" : cbSistema.getSelectedItem().toString()) + "',\n        '");
                    strOut.append("        '" + (arrTabelas[i][3].isEmpty() ? "" : arrTabelas[i][3]) + "',\n        '");
                    strOut.append((arrTabelas[i][6].isEmpty() ? "" : arrTabelas[i][6]) + "')");
                    strOut.append("\n");
                    strOut.append("  end if;");
                    strOut.append("\n");
                    strOut.append("end;");
                    strOut.append("\n");
                    strOut.append("/");
                    strOut.append("\n\n");

                    //strOut.append(strOutCltFixo);

                    /*
                    if (rsTabInterface.getCharacterStream("TRIGGER1") != null){
                        String aux;
                        BufferedReader br2 = new BufferedReader(rsTabInterface.getCharacterStream("TRIGGER1"));

                        while ((aux=br2.readLine())!=null){
                            strOut.append("exec PRC_UPDATE_CONCATENA_LONG('TAB_INTERFACE','TRIGGER1','TABLE_NAME','" + (txViewTabela.getText().isEmpty() ? "" : txViewTabela.getText()) + "','" + aux.replace("'", "''") + "');");
                            strOut.append("\n\n");
                        }
                    }


                    if (rsTabInterface.getCharacterStream("TRIGGER2") != null){
                        String aux;
                        BufferedReader br = new BufferedReader(rsTabInterface.getCharacterStream("TRIGGER2"));

                        while ((aux=br.readLine())!=null){
                            strOut.append("exec PRC_UPDATE_CONCATENA_LONG('TAB_INTERFACE','TRIGGER2','TABLE_NAME','" + (txViewTabela.getText().isEmpty() ? "" : txViewTabela.getText()) + "','" + aux.replace("'", "''") + "');");
                            strOut.append("\n\n");
                        }
                    }
                    */

                    String[] arrC = arrTabelas[i][1].split(";");    //Campos
                    String[] arrT = arrTabelas[i][2].split(";");    //Tamanhos
                    for(int e=0;e<arrC.length;e++){

                        strOut.append("insert into COLUNAS_TAB_INTERFACE");
                        strOut.append("(TABLE_NAME, COLUMN_NAME, TIPO_LOADER, FORMATO, COMANDO_EXTRA, TAMANHO, ORDEM, DESCRICAO, ARG_NAME, ARG_FUNCTION)");
                        strOut.append("values");
                        strOut.append("('" + arrTabelas[i][0] + "', '");                                 // Tabela
                        strOut.append(arrC[e] + "', '");                                                // Campos
                        strOut.append("C" + "', '");                                                    // Tipo Loader
                        strOut.append("CHAR" + "', '");                                                 //Formato
                        strOut.append("" + "', '");                                                     //CmdExtra
                        strOut.append(arrT[e] + "', '");                                                // Tamanho
                        strOut.append(Integer.toString(i) + "','");                                     //Ordem
                        strOut.append("','");                                                           //Descrição
                        strOut.append("" + "','");                                                      // Arqg Name
                        strOut.append("" + "');");                                                      // Arg Function
                        strOut.append("\n\n");
                    }

                    strOut.append("commit;");
                    strOut.append("\n\n");
                    strOut.append("set serveroutput on");
                    strOut.append("\n");
                    strOut.append("exec PRC_SINCRONIZA_TABELA('"+arrTabelas[i][0]+"');");
                    strOut.append("\n\n");

                    /*
                    if (rsTabInterface.getCharacterStream("TRIGGER1") != null){
                        String aux;
                        BufferedReader br = new BufferedReader(rsTabInterface.getCharacterStream("TRIGGER1"));

                        while ((aux=br.readLine())!=null){
                            strOut.append(aux);
                            strOut.append("\n");
                        }
                        strOut.append("/\n\n");
                    }


                    if (rsTabInterface.getCharacterStream("TRIGGER2") != null){
                        String aux;
                        BufferedReader br = new BufferedReader(rsTabInterface.getCharacterStream("TRIGGER2"));

                        while ((aux=br.readLine())!=null){
                            strOut.append(aux);
                            strOut.append("\n");
                        }
                        strOut.append("/\n");
                    }
                    */

                    strOut.append("\n\n");
                    strOut.append("CREATE OR REPLACE");
                    strOut.append("\n");
                    strOut.append("TRIGGER TI_" + arrTabelas[i][0]);
                    strOut.append("\n");
                    strOut.append("BEFORE INSERT ON " + arrTabelas[i][0]+"\n");
                    strOut.append("REFERENCING OLD AS old NEW AS new\n");
                    strOut.append("FOR EACH ROW\n");
                    strOut.append("begin\n");
                    strOut.append("    select seq_id_interface.nextval into :new.id from dual;\n\n");
                    strOut.append("end;\n");
                    strOut.append("/\n\n\n\n");
                    strOut.append("CREATE OR REPLACE\n");
                    strOut.append("TRIGGER TIA_" + arrTabelas[i][0]+"\n");
                    strOut.append("AFTER INSERT ON " + arrTabelas[i][0]+"\n");
                    strOut.append("REFERENCING OLD AS old NEW AS new\n");
                    strOut.append("FOR EACH ROW\n");
                    strOut.append("begin\n");
                    strOut.append("    insert into REGISTROS_INTERFACES (ID, ID_IMPORTACAO, TABLE_NAME, ID_REF)");
                    strOut.append("\n");
                    strOut.append("    values (:new.id, :new.id_importacao, '" + arrTabelas[i][0] + "', :new.id_ref);");
                    strOut.append("\n");
                    strOut.append("end;\n");
                    strOut.append("/\n\n\n\n");
                    strOut.append("CREATE OR REPLACE\n");
                    strOut.append("TRIGGER TD_" + arrTabelas[i][0] + "\n");
                    strOut.append("BEFORE DELETE ON " + arrTabelas[i][0]+"\n");
                    strOut.append("REFERENCING OLD AS old NEW AS new\n");
                    strOut.append("FOR EACH ROW\n");
                    strOut.append("begin\n");
                    strOut.append("    delete from REGISTROS_INTERFACES where id = :old.id;\n");
                    strOut.append("end;\n");
                    strOut.append("/\n\n\n\n\n\n");
                    strOut.append("-- //////\n");
                    strOut.append("-- //////  Não esqueça de reprocessar todos os GRANTS para todos os sistemas\n");
                    strOut.append("-- //////");

                    fileNameScripts = ".\\"+sUsername+"\\Scripts\\" + cbSistema.getSelectedItem().toString().trim().toLowerCase() + "_in_" + txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase() + "\\INOUT\\Tabelas\\" + fileName;
                    //fileName = ".\\"+sUsername+"\\Arquivos\\" + sIdSistema.trim().toLowerCase() + "_in_" + IDInterface.replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase() + "\\INOUT\\Tabelas\\" + fileName;

                    //File file = new File(fileName);
                    //if(!file.exists())
                    //	file.createNewFile();

                    //FileWriter fw = new FileWriter(file, false);

                    //fw.write(strOut.toString(),0,strOut.length());
                    //fw.close();

                    File fileScripts = new File(fileNameScripts);
                    if(!fileScripts.exists())
                        fileScripts.createNewFile();

                    FileWriter fwScripts = new FileWriter(fileScripts, false);

                    fwScripts.write(strOut.toString(),0,strOut.length());
                    fwScripts.close();
                }
			}

			//logMessage("File " + fileName + " was succesfull generated.");

		}

	/**************************************************************************
	 * <b>Gerar scripts das interfaces</b>
	 **************************************************************************/
	private void gerarCTLFixo() throws Exception{
        String fileName = "interface.sql";
        String fileNameScripts = "";
        String sUsername = "SFWIOAHD";

        new File(".\\"+sUsername).mkdir();
        new File(".\\"+sUsername+"\\Scripts").mkdir();
		if((chSaida.isSelected() ? "S" : "E").trim().equals("S")){
			fileNameScripts = ".\\"+sUsername+"\\Scripts\\" + cbSistema.getSelectedItem().toString().trim().toLowerCase() + "_out_" + txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase() + "\\INOUT\\Interface\\" + fileName;
			//fileName = ".\\"+sUsername+"\\Arquivos\\" + txIdSistema.getText().trim().toLowerCase() + "_out_" + txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase() + "\\INOUT\\Interface\\" + fileName;

            new File(".\\"+sUsername+"\\Scripts\\"+ cbSistema.getSelectedItem().toString().trim().toLowerCase() + "_out_" + txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase()).mkdir();
            new File(".\\"+sUsername+"\\Scripts\\"+ cbSistema.getSelectedItem().toString().trim().toLowerCase() + "_out_" + txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase()+"\\INOUT").mkdir();
            new File(".\\"+sUsername+"\\Scripts\\"+ cbSistema.getSelectedItem().toString().trim().toLowerCase() + "_out_" + txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase()+"\\INOUT\\Interface").mkdir();

		}else if((chSaida.isSelected() ? "S" : "E").trim().equals("E")){
			fileNameScripts = ".\\"+sUsername+"\\Scripts\\" + cbSistema.getSelectedItem().toString().trim().toLowerCase() + "_in_" + txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase() + "\\INOUT\\Interface\\" + fileName;
			//fileName = ".\\"+sUsername+"\\Arquivos\\" + txIdSistema.getText().trim().toLowerCase() + "_in_" + txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase() + "\\INOUT\\Interface\\" + fileName;

            new File(".\\"+sUsername+"\\Scripts\\"+ cbSistema.getSelectedItem().toString().trim().toLowerCase() + "_in_" + txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase()).mkdir();
            new File(".\\"+sUsername+"\\Scripts\\"+ cbSistema.getSelectedItem().toString().trim().toLowerCase() + "_in_" + txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase()+"\\INOUT").mkdir();
            new File(".\\"+sUsername+"\\Scripts\\"+ cbSistema.getSelectedItem().toString().trim().toLowerCase() + "_in_" + txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase()+"\\INOUT\\Interface").mkdir();
		}else{
			fileNameScripts = ".\\"+sUsername+"\\Scripts\\" + txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase() + "\\INOUT\\Interface\\" + fileName;
			//fileName = ".\\"+sUsername+"\\Arquivos\\" + txIdInterface.getText().trim().replace("(", "").replace(")", ")").replace(".", "").toLowerCase() + "\\INOUT\\Interface\\" + fileName;

            new File(".\\"+sUsername+"\\Scripts\\"+ txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase()).mkdir();
            new File(".\\"+sUsername+"\\Scripts\\"+ txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase()+"\\INOUT").mkdir();
            new File(".\\"+sUsername+"\\Scripts\\"+ txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase()+"\\INOUT\\Interface").mkdir();
		}


		StringBuffer strOut = new StringBuffer();
		//logMessage("Creating or appending to file " + fileNameScripts);

		strOut.append("conn &&INOUT_USER/&&INOUT_PASS@&&TNS\n\n");
		strOut.append("--  ///////\n");
		strOut.append("--  ///////     Script Gerado a partir do Sistema Gerenciador de Interfaces IN-OUT\n");
		strOut.append("--  ///////     Interface: " + txDescricao.getText() + "\n");
		strOut.append("--  ///////\n\n\n");
		strOut.append("delete from PERMISSAO_TABELA where ID_INTERFACE = '" + txIdInterface.getText() + "';\n\n");
		strOut.append("begin\n");
		strOut.append("   insert into    INTERFACES\n");
		strOut.append("      (ID_INTERFACE,\n");
		strOut.append("      DESCRICAO,\n");
		strOut.append("      NOME_MAQUINA,\n");
		strOut.append("      EXECUTAVEL,\n");
		strOut.append("      USERNAME,\n");
		strOut.append("      TEMPO_MEDIO,\n");
		strOut.append("      TIPO_INTERFACE)\n");
		strOut.append("      values\n");
		strOut.append("      ('" + txIdInterface.getText() + "',\n");
		strOut.append("      '" + txDescricao.getText() + "',\n");
		strOut.append("   	  '&&USER_MACHINE',\n");
		strOut.append("	  '" + txExecutavel.getText() + "',\n");
		strOut.append("	  '" + txUsername.getText() + "',\n");
		strOut.append("	  '0',\n");
		strOut.append("   '" + (chSaida.isSelected() ? "S" : "E") + "');\n");
		strOut.append("exception\n");
		strOut.append("    when dup_val_on_index then\n");
		strOut.append("        update INTERFACES\n");
		strOut.append("        set\n");
		strOut.append("                DESCRICAO = '" + txDescricao.getText() + "',\n");
		strOut.append("                NOME_MAQUINA = '&&USER_MACHINE',\n");
		strOut.append("                EXECUTAVEL = '" + txExecutavel.getText() + "',\n");
		strOut.append("                USERNAME = '" + txUsername.getText() + "',\n");
		strOut.append("                TIPO_INTERFACE = '" + (chSaida.isSelected() ? "S" : "E") + "'\n");
        strOut.append("        where id_interface  = '" + txIdInterface.getText() + "';\n");
		strOut.append("end;\n");
		strOut.append("/\n\n");
		strOut.append("delete from INTERFACE_SAIDA where ID_INTERFACE =  '" + txIdInterface.getText() + "';\n\n");
		strOut.append("insert into SISTEMA_INTERFACE (ID_INTERFACE, ID_SISTEMA) values ('" + txIdInterface.getText() + "' , '" + cbSistema.getSelectedItem() + "');\n\n");
		strOut.append("commit;\n\n\n");
		strOut.append("-- //////\n");
		strOut.append("-- //////  FIM DO SCRIPT\n");
		strOut.append("-- //////");

		// Criando arquivo na pasta de arquivos
        //File file = new File(fileName);
		//if(!file.exists())
		//	file.createNewFile();

        //FileWriter fw = new FileWriter(file, false);
        //fw.write(strOut.toString(),0,strOut.length());
        //fw.close();

        // Criando arquivo na pasta de scripts
        File fileScripts = new File(fileNameScripts);
		if(!fileScripts.exists())
			fileScripts.createNewFile();

		FileWriter fwScripts = new FileWriter(fileScripts, false);
		fwScripts.write(strOut.toString(),0,strOut.length());
		fwScripts.close();
	}

	/**************************************************************************
	 * <b>Gerar scripts das interfaces</b>
	 **************************************************************************/
	private void gerarArquivosExternos() throws Exception{
        String fileName = "interface.sql";
        String fileNameScripts = "";

        new File(".\\"+sUsername).mkdir();
        new File(".\\"+sUsername+"\\Scripts").mkdir();
		if((chSaida.isSelected() ? "S" : "E").trim().equals("S")){
			fileNameScripts = ".\\"+sUsername+"\\Scripts\\" + cbSistema.getSelectedItem().toString().trim().toLowerCase() + "_out_" + txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase() + "\\INOUT\\ArquivosExternos\\" + fileName;
			//fileName = ".\\"+sUsername+"\\Arquivos\\" + txIdSistema.getText().trim().toLowerCase() + "_out_" + txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase() + "\\INOUT\\ArquivosExternos\\" + fileName;

            new File(".\\"+sUsername+"\\Scripts\\"+ cbSistema.getSelectedItem().toString().trim().toLowerCase() + "_out_" + txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase()).mkdir();
            new File(".\\"+sUsername+"\\Scripts\\"+ cbSistema.getSelectedItem().toString().trim().toLowerCase() + "_out_" + txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase()+"\\INOUT").mkdir();
            new File(".\\"+sUsername+"\\Scripts\\"+ cbSistema.getSelectedItem().toString().trim().toLowerCase() + "_out_" + txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase()+"\\INOUT\\ArquivosExternos").mkdir();

		}else if((chSaida.isSelected() ? "S" : "E").trim().equals("E")){
			fileNameScripts = ".\\"+sUsername+"\\Scripts\\" + cbSistema.getSelectedItem().toString().trim().toLowerCase() + "_in_" + txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase() + "\\INOUT\\ArquivosExternos\\" + fileName;
			//fileName = ".\\"+sUsername+"\\Arquivos\\" + txIdSistema.getText().trim().toLowerCase() + "_in_" + txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase() + "\\INOUT\\ArquivosExternos\\" + fileName;

            new File(".\\"+sUsername+"\\Scripts\\"+ cbSistema.getSelectedItem().toString().trim().toLowerCase() + "_in_" + txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase()).mkdir();
            new File(".\\"+sUsername+"\\Scripts\\"+ cbSistema.getSelectedItem().toString().trim().toLowerCase() + "_in_" + txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase()+"\\ArquivosExternos").mkdir();
            new File(".\\"+sUsername+"\\Scripts\\"+ cbSistema.getSelectedItem().toString().trim().toLowerCase() + "_in_" + txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase()+"\\INOUT\\ArquivosExternos").mkdir();
		}else{
			fileNameScripts = ".\\"+sUsername+"\\Scripts\\" + txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase() + "\\INOUT\\ArquivosExternos\\" + fileName;
			//fileName = ".\\"+sUsername+"\\Arquivos\\" + txIdInterface.getText().trim().replace("(", "").replace(")", ")").replace(".", "").toLowerCase() + "\\INOUT\\Interface\\" + fileName;

            new File(".\\"+sUsername+"\\Scripts\\"+ txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase()).mkdir();
            new File(".\\"+sUsername+"\\Scripts\\"+ txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase()+"\\INOUT").mkdir();
            new File(".\\"+sUsername+"\\Scripts\\"+ txIdInterface.getText().replace("(", "").replace(")", ")").replace(".", "").trim().toLowerCase()+"\\INOUT\\ArquivosExternos").mkdir();
		}

		StringBuffer strOut = new StringBuffer();
		//logMessage("Creating or appending to file " + fileNameScripts);

		strOut.append("conn &&INOUT_USER/&&INOUT_PASS@&&TNS\n\n");
        strOut.append("--***********************************************************************\n");
        strOut.append("--   --------------------------------------------------------------------\n");
        strOut.append("--   Softcomex Informática Ltda.\n");
        strOut.append("--   Integration Team - @Abril-2009\n");
        strOut.append("--   --------------------------------------------------------------------\n");
        strOut.append("--***********************************************************************\n");
        strOut.append("\n");
        strOut.append("-- Conectando ao Softcomex\n");
        strOut.append("conn &2/&3@&4\n");
        strOut.append("\n");
        strOut.append("ALTER SESSION SET OPTIMIZER_MODE = CHOOSE;\n");
        strOut.append("\n");
        strOut.append("-- Seta variaveis do SqlPlus\n");
        strOut.append("set head off\n");
        strOut.append("set feed off\n");
        strOut.append("set pages 50000\n");
        strOut.append("set colsep ''\n");
        strOut.append("set sqlprompt ''\n");
        strOut.append("set newpage none\n");
        strOut.append("set echo off\n");
        strOut.append("set lines 7000\n");
        strOut.append("set long 312\n");
        strOut.append("set linesize 312\n");
        strOut.append("set longchunksize 312\n");
        strOut.append("set verify off\n");
        strOut.append("\n");
        strOut.append("DEFINE OIF_PARCEIRO    = " + txIdParceiro.getText() + "\n");
        strOut.append("DEFINE OIF_EVENTO      = " + txIdEvento.getText() + "\n");
        strOut.append("DEFINE COD_INTERFACE   = " + txIdInterface.getText() + "\n");
        strOut.append("DEFINE FILE_NAME       = " + txArquivoTexto.getText() + "\n");
        strOut.append("DEFINE FILE_PATH       = .\\Saida\\\n");
        strOut.append("\n");
        strOut.append("declare\n");
        strOut.append("    id_linha         NUMBER         := 0;\n");
        strOut.append("    msg_erro         VARCHAR2(1000) := null;\n");
        strOut.append("    err_no_data      VARCHAR2(1000) := 'não encontrado(a).';\n");
        strOut.append("    data_arquivo     VARCHAR2(14)   := '';\n");
        strOut.append("\n");
        strOut.append("    -- Informa sucesso\n");
        strOut.append("    -- Variaveis de Status InOut\n");
        strOut.append("    io_qtd_linha     NUMBER       := 0;\n");
        strOut.append("    io_qtd_erros     NUMBER       := 0;\n");
        strOut.append("    erro             NUMBER       := 0;\n");
        strOut.append("    controle         NUMBER       := 0;\n");
        strOut.append("    seq_arquivo      NUMBER       := 0;\n");
        strOut.append("\n");
        strOut.append("    --nome do arquivo de saída\n");
        strOut.append("    arquivo  VARCHAR2(100):=  '';\n");
        strOut.append("\n");
        strOut.append("    -- usado para armazenar o conteúdo do arquivo\n");
        strOut.append("    txt_linha           VARCHAR2(4000);\n");
        strOut.append("\n");
        strOut.append("    FORMATO_DATA         VARCHAR2(10) := 'DD/MM/YYYY';\n");
        strOut.append("    FORMATO_NUMERO17_3   VARCHAR2(18) := '99999999999999.999';\n");
        strOut.append("    FORMATO_NUMERO17_2   VARCHAR2(18) := '999999999999999.99';\n");
        strOut.append("    FORMATO_NUMERO3      VARCHAR2(3)  := '999';\n");
        strOut.append("    FORMATO_NUMERO4      VARCHAR2(4)  := '9999';\n");
        strOut.append("\n");
        strOut.append("    procedure p( p_str in varchar2 )\n");
        strOut.append("    is\n");
        strOut.append("    begin\n");
        strOut.append("        txt_linha := txt_linha || p_str;\n");
        strOut.append("    exception\n");
        strOut.append("    when others then \n");
        strOut.append("        raise_application_error(-20001 , 'Erro de concatenação no CHAR');\n");
        strOut.append("    end;\n");
        strOut.append("\n");
        strOut.append("begin --inicio\n");
        strOut.append("\n");
        strOut.append("    -- Inicia loop com os Eventos e Parceiros\n");
        strOut.append("    for OIF in ( select id_transacao,\n");
        strOut.append("               pk_number_01, pk_number_02, pk_number_03, pk_number_04, pk_number_05, pk_number_06,\n");
        strOut.append("               pk_vc2_01   , pk_vc2_02   , pk_vc2_03   , pk_vc2_04   , pk_vc2_05   , pk_vc2_06   \n");
        strOut.append("        from   oif_export\n");
        strOut.append("        where  id_evento   = &&OIF_EVENTO\n");
        strOut.append("        and    id_parceiro = &&OIF_PARCEIRO\n");
        strOut.append("        and    status in (1,4) ) loop\n");
        strOut.append("\n");
        strOut.append("\n");
        strOut.append("    -------------------------------------------------------\n");
        strOut.append("    -- Gerando Registros\n");
        strOut.append("    -------------------------------------------------------\n");
        strOut.append("    begin -- begin OIF\n");
        strOut.append("    SAVEPOINT loop_oif_export;\n");
        strOut.append("\n");
        strOut.append("    data_arquivo := TO_CHAR(SYSDATE, 'DDMMYYYYHH24MI');\n");
        strOut.append("\n");
        strOut.append("    arquivo := '&&FILE_PATH' || '\' || '&&FILE_NAME' || '_' || data_arquivo || '.txt';\n");
        strOut.append("\n");
        strOut.append("    --\n");
        strOut.append("    for  NF in ( select *   from vw_sap_is_notafiscal_tp tp where tp.id_notafiscal = oif.pk_number_01\n");
        strOut.append("    ) loop\n");
        strOut.append("\n");
        strOut.append("        controle := 1;\n");
        strOut.append("        id_linha := id_linha + 1;\n");
        strOut.append("\n");
        strOut.append("        -- reinicia o CHAR\n");
        strOut.append("        txt_linha := null;\n");
        strOut.append("\n");

        for(int i=0;i<arrTabelas.length;i++){

                    strOut.append("    for  NF in ( select *   from " + arrTabelas[i][0] + " tp where " + txCondicaoWhere.getText() + "\n");
                    strOut.append("    ) loop\n");
                    strOut.append("\n");
                    strOut.append("        controle := 1;\n");
                    strOut.append("        id_linha := id_linha + 1;\n");
                    strOut.append("\n");
                    strOut.append("        -- reinicia o CHAR\n");
                    strOut.append("        txt_linha := null;\n");
                    strOut.append("\n");

                    String[] arrC = arrTabelas[i][1].split(";");    //Campos
                    String[] arrT = arrTabelas[i][2].split(";");    //Tamanhos
                    for(int e=0;e<arrC.length;e++){
                        strOut.append("        p( pkg_it_gen.ctoc(NF." + arrC[e] + "," + arrT[e] + ", ' ', 'R') );\n");
                    }
        }
        strOut.append("        p( pkg_it_gen.ctoc(NF.PART_NUMBER,14, ' ', 'R') );\n");
        strOut.append("        p( pkg_it_gen.ctoc(NF.ID_AREA,14, ' ', 'R') );\n");
        strOut.append("        p( pkg_it_gen.ctoc(NF.COD_FORNECEDOR,14, ' ', 'R') );\n");
        strOut.append("        p( pkg_it_gen.ctoc(' ',14, ' ', 'R') );\n");
        strOut.append("        p( pkg_it_gen.ctoc(NF.NUM_INVOICE,14, ' ', 'R') );\n");
        strOut.append("        p( pkg_it_gen.ctoc(NF.DATA_CONHECIMENTO,10, ' ', 'R') );\n");
        strOut.append("        p( pkg_it_gen.ctoc(NF.NUM_DI,14, ' ', 'R') );\n");
        strOut.append("        p( pkg_it_gen.ctoc(NF.INSTANTE_CHECK_POINT,10, ' ', 'R') );\n");
        strOut.append("        p( pkg_it_gen.ctoc(NF.NUM_NF,14, ' ', 'R') );\n");
        strOut.append("        p( pkg_it_gen.ctoc(NF.DT_EMISSAO,10, ' ', 'R') );\n");
        strOut.append("        p( pkg_it_gen.ctoc(NF.CFOP,5, ' ', 'R') );\n");
        strOut.append("        p( pkg_it_gen.dtoc(NF.VENCIMENTO, FORMATO_DATA, 10, ' ', 'R') );\n");
        strOut.append("        p( pkg_it_gen.ntoc(NF.NUM_DIAS,FORMATO_NUMERO4, '', 4, '0', 'L') );\n");
        strOut.append("        p( pkg_it_gen.ntoc(NF.QTDE,FORMATO_NUMERO17_3, '', 17, '0', 'L') );\n");
        strOut.append("        p( pkg_it_gen.ntoc(NF.VLR_TOTAL,FORMATO_NUMERO17_2, '', 17, '0', 'L') );\n");
        strOut.append("        p( pkg_it_gen.ctoc(NF.MOEDA,3, ' ', 'R') );\n");
        strOut.append("        p( pkg_it_gen.ntoc(NF.VLR_FRETE,FORMATO_NUMERO17_2, '', 17, '0', 'L') );\n");
        strOut.append("        p( pkg_it_gen.ntoc(NF.VLR_SEGURO,FORMATO_NUMERO17_2, '', 17, '0', 'L') );\n");
        strOut.append("        p( pkg_it_gen.ctoc(NF.COD_MOEDA_FRETE,3, ' ', 'R') );\n");
        strOut.append("        p( pkg_it_gen.ctoc(NF.COD_MOEDA_SEGURO,3, ' ', 'R') );\n");
        strOut.append("        p( pkg_it_gen.ntoc(NF.VLR_II,FORMATO_NUMERO17_2, '', 17, '0', 'L') );\n");
        strOut.append("        p( pkg_it_gen.ntoc(NF.VLR_ICMS,FORMATO_NUMERO17_2, '', 17, '0', 'L') );\n");
        strOut.append("        p( pkg_it_gen.ntoc(NF.PIS,FORMATO_NUMERO17_2, '', 17, '0', 'L') );\n");
        strOut.append("        p( pkg_it_gen.ntoc(NF.COFINS,FORMATO_NUMERO17_2, '', 17, '0', 'L') );\n");
        strOut.append("        p( pkg_it_gen.ctoc(NF.COD_UNIDADE,3, ' ', 'R') );\n");
        strOut.append("        p( pkg_it_gen.ctoc(' ',17, ' ', 'R') );\n");
        strOut.append("\n");
        strOut.append("        -- INFORMA LINHA ENCONTRADA PARA COMPOR O TXT\n");
        strOut.append("        PRC_INSERE_OIF_SPOOL_TMP(&1, ID_LINHA, txt_linha, ARQUIVO);\n");
        strOut.append("\n");
        strOut.append("      end loop;  -- HEADER\n");
        strOut.append("      --\n");
        strOut.append("      exception\n");
        strOut.append("          -- Notifica erros na exportação das linhas do TXT - CAPA\n");
        strOut.append("          when NO_DATA_FOUND then\n");
        strOut.append("              msg_erro := 'ID_NOTAFISCAL' || err_no_data;\n");
        strOut.append("              erro := 1;\n");
        strOut.append("          when OTHERS then\n");
        strOut.append("              msg_erro := sqlerrm;\n");
        strOut.append("              erro := 1;\n");
        strOut.append("      end;\n");
        strOut.append("\n");
        strOut.append("      if controle != 1 then\n");
        strOut.append("         erro:= 1;  \n");
        strOut.append("      end if;\n");
        strOut.append("\n");
        strOut.append("\n");
        strOut.append("      CONTROLE := 0;\n");
        strOut.append("      -------------------------------------------------------\n");
        strOut.append("      -- VALIDA REGISTRO GERADO NO SPOOL\n");
        strOut.append("      -------------------------------------------------------\n");
        strOut.append("      if erro = 0 then\n");
        strOut.append("         PRC_ATU_STATUS_OIF_EXPORT(&1, OIF.Id_Transacao, 'S', 0, null);\n");
        strOut.append("         INSERE_HISTORICO_SAIDA('&COD_INTERFACE', OIF.Id_Transacao, OIF.PK_NUMBER_01, NULL, NULL, null);\n");
        strOut.append("         COMMIT;\n");
        strOut.append("      else\n");
        strOut.append("         -- Atualiza status da transação informando o ERRO\n");
        strOut.append("         io_qtd_erros := io_qtd_erros +1;\n");
        strOut.append("     ROLLBACK to savepoint loop_oif_export;\n");
        strOut.append("         PRC_ATU_STATUS_OIF_EXPORT(&1, OIF.Id_Transacao, 'N', 0, ' Erro: '|| msg_erro || ' - ' || to_char(OIF.PK_NUMBER_01) || ' (nulo) FOI NOTIFICADO E NAO EXISTE NA VIEW' );\n");
        strOut.append("         COMMIT;\n");
        strOut.append("         msg_erro := null;\n");
        strOut.append("         erro := 0;\n");
        strOut.append("      end if;\n");
        strOut.append("\n");
        strOut.append("   end loop;\n");
        strOut.append("\n");
        strOut.append("   informa_qtde_registros_import(&1,io_qtd_erros,io_qtd_erros);\n");
        strOut.append("\n");
        strOut.append("   commit;\n");
        strOut.append("end;\n");
        strOut.append("/\n");
        strOut.append("\n");
        strOut.append("-- Gera script SQL com o spool para os arquivos necessários\n");
        strOut.append("@SFW_IT_GERA_SCRIPT_SPOOL.SQL &1 .\n");
        strOut.append("\n");
        strOut.append("-- Executa script SQL gerado\n");
        strOut.append("@SFW_IT_SCRIPT_SPOOL.SQL\n");
        strOut.append("\n");
        strOut.append("exit");


		// Criando arquivo na pasta de arquivos
        //File file = new File(fileName);
		//if(!file.exists())
		//	file.createNewFile();

        //FileWriter fw = new FileWriter(file, false);
        //fw.write(strOut.toString(),0,strOut.length());
        //fw.close();

        // Criando arquivo na pasta de scripts
        File fileScripts = new File(fileNameScripts);
		if(!fileScripts.exists())
			fileScripts.createNewFile();

		FileWriter fwScripts = new FileWriter(fileScripts, false);
		fwScripts.write(strOut.toString(),0,strOut.length());
		fwScripts.close();
	}

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SfwMapeamentoFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAdd;
    private javax.swing.JButton btRemove;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cbSistema;
    private javax.swing.JCheckBox chCTLFixo;
    private javax.swing.JCheckBox chEntrada;
    private javax.swing.JCheckBox chIntMapeamento;
    private javax.swing.JCheckBox chOutros;
    private javax.swing.JCheckBox chProcessamentoDireto;
    private javax.swing.JCheckBox chRFC;
    private javax.swing.JCheckBox chSaida;
    private javax.swing.JCheckBox chTXT;
    private javax.swing.JCheckBox chXML;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList jList1;
    private javax.swing.JList jListLinhas;
    private javax.swing.JList jListTabelas;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToggleButton jToggleButton2;
    private javax.swing.JToggleButton jToggleButton3;
    private javax.swing.JToggleButton jToggleButton4;
    private javax.swing.JRadioButton rbFTP;
    private javax.swing.JRadioButton rbNenhum;
    private javax.swing.JRadioButton rbSSh;
    private javax.swing.JTextField txArquivoTexto;
    private javax.swing.JTextField txBlockName;
    private javax.swing.JTextField txCLTName;
    private javax.swing.JTextField txCmdExtra;
    private javax.swing.JTextField txCondicaoWhere;
    private javax.swing.JTextField txDescricao;
    private javax.swing.JTextField txExecutavel;
    private javax.swing.JTextField txIdEvento;
    private javax.swing.JTextField txIdInterface;
    private javax.swing.JTextField txIdParceiro;
    private javax.swing.JTextField txIdSap;
    private javax.swing.JTextField txLocalTXT;
    private javax.swing.JTextField txLocalXLS;
    private javax.swing.JTextField txNomeODBC;
    private javax.swing.JTextField txODBCPass;
    private javax.swing.JTextField txODBCUser;
    private javax.swing.JTextField txOrder;
    private javax.swing.JTextField txSeparador;
    private javax.swing.JTextField txTabRef;
    private javax.swing.JTextField txUsername;
    // End of variables declaration//GEN-END:variables

}
class ArrayListComboBoxModel extends AbstractListModel implements ComboBoxModel {
  private Object selectedItem;

  private ArrayList anArrayList;

  public ArrayListComboBoxModel(ArrayList arrayList) {
    anArrayList = arrayList;
  }

  public Object getSelectedItem() {
    return selectedItem;
  }

  public void setSelectedItem(Object newValue) {
    selectedItem = newValue;
  }

  public int getSize() {
    return anArrayList.size();
  }

  public Object getElementAt(int i) {
    return anArrayList.get(i);
  }
}
